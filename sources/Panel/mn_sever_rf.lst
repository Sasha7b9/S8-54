CCS PCH C Compiler, Version 5.015, 5967               16-ноя-17 11:10

               Filename:   D:\Projects\Archiv\S8-54\sources\PanelS8-54\mn_sever_rf.lst

               ROM used:   2202 bytes (5%)
                           Largest free fragment is 46114
               RAM used:   96 (2%) at main() level
                           116 (3%) worst case
               Stack used: 6 locations (4 in main + 2 for interrupts)
               Stack size: 30

*
0000:  GOTO   0704
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   015C
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... //Опрос состояния кнопок и ручек. 
.................... //Состояние кнопок и ручек передается по SPI(ведущий режим) и считывается состояние светодиодов каждые 10мс  
.................... //Исходный Sever-S (поменялись все входы кнопок и ручек, добавились 8 шт.) 
....................  
.................... #include <18F2515.h> 
.................... //////////// Standard Header file for the PIC18F2515 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2515 
0096:  MOVFF  FF2,0D
009A:  BCF    FF2.7
009C:  CLRF   FF7
009E:  ADDLW  B0
00A0:  MOVWF  FF6
00A2:  MOVLW  00
00A4:  ADDWFC FF7,F
00A6:  TBLRD*+
00A8:  MOVF   FF5,W
00AA:  BTFSC  0D.7
00AC:  BSF    FF2.7
00AE:  RETURN 0
00B0:  DATA 3E,3D
00B2:  DATA 3B,37
00B4:  DATA 2F,1F
00B6:  MOVFF  FF2,0D
00BA:  BCF    FF2.7
00BC:  CLRF   FF7
00BE:  ADDLW  D0
00C0:  MOVWF  FF6
00C2:  MOVLW  00
00C4:  ADDWFC FF7,F
00C6:  TBLRD*+
00C8:  MOVF   FF5,W
00CA:  BTFSC  0D.7
00CC:  BSF    FF2.7
00CE:  RETURN 0
00D0:  DATA C9,C9
00D2:  DATA C9,59
00D4:  DATA 7F,49
00D6:  MOVFF  FF2,0D
00DA:  BCF    FF2.7
00DC:  CLRF   FF7
00DE:  ADDLW  F0
00E0:  MOVWF  FF6
00E2:  MOVLW  00
00E4:  ADDWFC FF7,F
00E6:  TBLRD*+
00E8:  MOVF   FF5,W
00EA:  BTFSC  0D.7
00EC:  BSF    FF2.7
00EE:  RETURN 0
00F0:  DATA 9A,05
00F2:  DATA D8,05
00F4:  DATA 16,06
00F6:  DATA 54,06
00F8:  DATA 88,06
00FA:  DATA A8,06
00FC:  MOVFF  FEC,FFA
0100:  MOVF   FED,F
0102:  MOVFF  FEF,FE8
0106:  MOVWF  FF9
0108:  RETURN 0
010A:  MOVF   6E,W
010C:  ANDLW  07
010E:  MOVWF  00
0110:  RRCF   6E,W
0112:  MOVWF  01
0114:  RRCF   01,F
0116:  RRCF   01,F
0118:  MOVLW  1F
011A:  ANDWF  01,F
011C:  MOVF   01,W
011E:  ADDWF  70,W
0120:  MOVWF  FE9
0122:  MOVLW  00
0124:  ADDWFC 71,W
0126:  MOVWF  FEA
0128:  CLRF   01
012A:  INCF   01,F
012C:  INCF   00,F
012E:  BRA    0132
0130:  RLCF   01,F
0132:  DECFSZ 00,F
0134:  BRA    0130
0136:  MOVF   6F,F
0138:  BZ    0140
013A:  MOVF   01,W
013C:  IORWF  FEF,F
013E:  BRA    0146
0140:  COMF   01,F
0142:  MOVF   01,W
0144:  ANDWF  FEF,F
0146:  RETURN 0
....................  
.................... #list 
....................  
.................... #include <P18F2515.INC> 
....................  //       LIST 
....................  
....................  
....................  //       NOLIST 
....................  
....................  
....................  //       IFNDEF __18F2515 
....................  //          MESSG "Processor-header file mismatch.  Verify selected processor." 
....................  //       ENDIF 
....................  
.................... /*;========================================================================== 
.................... ;       18xxxx Family        EQUates 
.................... ;==========================================================================*/ 
.................... #define FSR0            = 0 
.................... #define FSR1            = 1 
.................... #define FSR2            = 2 
....................  
.................... #define FAST            = 1 
....................  
.................... #define W               = 0 
.................... #define A               = 0 
.................... #define ACCESS          = 0 
.................... #define BANKED          = 1 
.................... //;========================================================================== 
....................  
.................... //;========================================================================== 
.................... //;       16Cxxx/17Cxxx Substitutions 
.................... //;========================================================================== 
....................   #define DDRA  TRISA      ; PIC17Cxxx SFR substitution 
....................   #define DDRB  TRISB      ; PIC17Cxxx SFR substitution 
....................   #define DDRC  TRISC      ; PIC17Cxxx SFR substitution 
....................   #define DDRD  TRISD      ; PIC17Cxxx SFR substitution 
....................   #define DDRE  TRISE      ; PIC17Cxxx SFR substitution 
....................  
.................... //;========================================================================== 
.................... //; 
.................... //;       Register Definitions 
.................... //; 
.................... //;========================================================================== 
....................  
.................... //;----- Register Files ----------------------------------------------------- 
.................... #byte PORTA            =  0x0F80 
.................... #byte PORTB            =  0x0F81 
.................... #byte PORTC            =  0x0F82 
.................... #byte PORTE            =  0x0F84 
.................... #byte LATA             =  0x0F89 
.................... #byte LATB             =  0x0F8A 
.................... #byte LATC             =  0x0F8B 
.................... //#byte DDRA             =  0x0F92 
.................... #byte TRISA            =  0x0F92 
.................... //#byte DDRB             =  0x0F93 
.................... #byte TRISB            =  0x0F93 
.................... //#byte DDRC             =  0x0F94 
.................... #byte TRISC            =  0x0F94 
.................... #byte OSCTUNE          =  0x0F9B 
.................... #byte PIE1             =  0x0F9D 
.................... #byte PIR1             =  0x0F9E 
.................... #byte IPR1             =  0x0F9F 
.................... #byte PIE2             =  0x0FA0 
.................... #byte PIR2             =  0x0FA1 
.................... #byte IPR2             =  0x0FA2 
.................... #byte RCSTA            =  0x0FAB 
.................... #byte TXSTA            =  0x0FAC 
.................... #byte TXREG            =  0x0FAD 
.................... #byte RCREG            =  0x0FAE 
.................... #byte SPBRG            =  0x0FAF 
.................... #byte SPBRGH           =  0x0FB0 
.................... #byte T3CON            =  0x0FB1 
.................... #byte TMR3L            =  0x0FB2 
.................... #byte TMR3H            =  0x0FB3 
.................... #byte CMCON            =  0x0FB4 
.................... #byte CVRCON           =  0x0FB5 
.................... #byte PWM1CON          =  0x0FB7 
.................... #byte BAUDCON          =  0x0FB8 
.................... #byte BAUDCTL          =  0x0FB8 
.................... #byte CCP2CON          =  0x0FBA 
.................... #byte CCPR2            =  0x0FBB 
.................... #byte CCPR2L           =  0x0FBB 
.................... #byte CCPR2H           =  0x0FBC 
.................... #byte CCP1CON          =  0x0FBD 
.................... #byte CCPR1            =  0x0FBE 
.................... #byte CCPR1L           =  0x0FBE 
.................... #byte CCPR1H           =  0x0FBF 
.................... #byte ADCON2           =  0x0FC0 
.................... #byte ADCON1           =  0x0FC1 
.................... #byte ADCON0           =  0x0FC2 
.................... #byte ADRES            =  0x0FC3 
.................... #byte ADRESL           =  0x0FC3 
.................... #byte ADRESH           =  0x0FC4 
.................... #byte SSPCON2          =  0x0FC5 
.................... #byte SSPCON1          =  0x0FC6 
.................... #byte SSPSTAT          =  0x0FC7 
.................... #byte SSPADD           =  0x0FC8 
.................... #byte SSPBUF           =  0x0FC9 
.................... #byte T2CON            =  0x0FCA 
.................... #byte PR2              =  0x0FCB 
.................... #byte TMR2             =  0x0FCC 
.................... #byte T1CON            =  0x0FCD 
.................... #byte TMR1L            =  0x0FCE 
.................... #byte TMR1H            =  0x0FCF 
.................... #byte RCON             =  0x0FD0 
.................... #byte WDTCON           =  0x0FD1 
.................... #byte HLVDCON          =  0x0FD2 
.................... #byte LVDCON           =  0x0FD2 
.................... #byte OSCCON           =  0x0FD3 
.................... #byte T0CON            =  0x0FD5 
.................... #byte TMR0L            =  0x0FD6 
.................... #byte TMR0H            =  0x0FD7 
.................... #byte STATUS           =  0x0FD8 
.................... #byte FSR2L            =  0x0FD9 
.................... #byte FSR2H            =  0x0FDA 
.................... #byte PLUSW2           =  0x0FDB 
.................... #byte PREINC2          =  0x0FDC 
.................... #byte POSTDEC2         =  0x0FDD 
.................... #byte POSTINC2         =  0x0FDE 
.................... #byte INDF2            =  0x0FDF 
.................... #byte BSR              =  0x0FE0 
.................... #byte FSR1L            =  0x0FE1 
.................... #byte FSR1H            =  0x0FE2 
.................... #byte PLUSW1           =  0x0FE3 
.................... #byte PREINC1          =  0x0FE4 
.................... #byte POSTDEC1         =  0x0FE5 
.................... #byte POSTINC1         =  0x0FE6 
.................... #byte INDF1            =  0x0FE7 
.................... #byte WREG             =  0x0FE8 
.................... #byte FSR0L            =  0x0FE9 
.................... #byte FSR0H            =  0x0FEA 
.................... #byte PLUSW0           =  0x0FEB 
.................... #byte PREINC0          =  0x0FEC 
.................... #byte POSTDEC0         =  0x0FED 
.................... #byte POSTINC0         =  0x0FEE 
.................... #byte INDF0            =  0x0FEF 
.................... #byte INTCON3          =  0x0FF0 
.................... #byte INTCON2          =  0x0FF1 
.................... #byte INTCON           =  0x0FF2 
.................... #byte PROD             =  0x0FF3 
.................... #byte PRODL            =  0x0FF3 
.................... #byte PRODH            =  0x0FF4 
.................... #byte TABLAT           =  0x0FF5 
.................... #byte TBLPTR           =  0x0FF6 
.................... #byte TBLPTRL          =  0x0FF6 
.................... #byte TBLPTRH          =  0x0FF7 
.................... #byte TBLPTRU          =  0x0FF8 
.................... #byte PC               =  0x0FF9 
.................... #byte PCL              =  0x0FF9 
.................... #byte PCLATH           =  0x0FFA 
.................... #byte PCLATU           =  0x0FFB 
.................... #byte STKPTR           =  0x0FFC 
.................... #byte TOS              =  0x0FFD 
.................... #byte TOSL             =  0x0FFD 
.................... #byte TOSH             =  0x0FFE 
.................... #byte TOSU             =  0x0FFF 
.................... /* 
.................... //;----- PORTA Bits ----------------------------------------------------- 
.................... #define RA0              =  0x0000 
.................... #define RA1              =  0x0001 
.................... #define RA2              =  0x0002 
.................... #define RA3              =  0x0003 
.................... #define RA4              =  0x0004 
.................... #define RA5              =  0x0005 
.................... #define RA6              =  0x0006 
.................... #define RA7              =  0x0007 
....................  
.................... #define T0CKI            =  0x0004 
.................... #define AN4              =  0x0005 
....................  
.................... #define SS               =  0x0005 
....................  
.................... #define NOT_SS           =  0x0005 
....................  
.................... #define LVDIN            =  0x0005 
....................  
.................... #define HLVDIN           =  0x0005 
....................  
....................  
.................... //;----- PORTB Bits ----------------------------------------------------- 
.................... #define RB0              =  0x0000 
.................... #define RB1              =  0x0001 
.................... #define RB2              =  0x0002 
.................... #define RB3              =  0x0003 
.................... #define RB4              =  0x0004 
.................... #define RB5              =  0x0005 
.................... #define RB6              =  0x0006 
.................... #define RB7              =  0x0007 
....................  
.................... #define INT0             =  0x0000 
.................... #define INT1             =  0x0001 
.................... #define INT2             =  0x0002 
.................... #define CCP2_PORTB       =  0x0003 
.................... #define KBI0             =  0x0004 
.................... #define KBI1             =  0x0005 
.................... #define KBI2             =  0x0006 
.................... #define KBI3             =  0x0007 
....................  
.................... #define AN12             =  0x0000 
.................... #define AN10             =  0x0001 
.................... #define AN8              =  0x0002 
.................... #define AN9              =  0x0003 
.................... #define AN11             =  0x0004 
.................... #define PGM              =  0x0005 
.................... #define PGC              =  0x0006 
.................... #define PGD              =  0x0007 
....................  
.................... #define DAD5             =  0x0005 
.................... #define DAD6             =  0x0006 
.................... #define DAD7             =  0x0007 
....................  
....................  
.................... //;----- PORTC Bits ----------------------------------------------------- 
.................... #define RC0              =  0x0000 
.................... #define RC1              =  0x0001 
.................... #define RC2              =  0x0002 
.................... #define RC3              =  0x0003 
.................... #define RC4              =  0x0004 
.................... #define RC5              =  0x0005 
.................... #define RC6              =  0x0006 
.................... #define RC7              =  0x0007 
....................  
.................... #define T1OSO            =  0x0000 
.................... #define T1OSI            =  0x0001 
.................... #define CCP1             =  0x0002 
.................... #define SCK              =  0x0003 
.................... #define SDI              =  0x0004 
.................... #define SDO              =  0x0005 
.................... #define TX               =  0x0006 
.................... #define RX               =  0x0007 
....................  
.................... #define T13CKI           =  0x0000 
.................... #define CCP2_PORTC       =  0x0001 
.................... #define SCL              =  0x0003 
.................... #define SDA              =  0x0004 
.................... #define CK               =  0x0006 
.................... //; DT is a reserved word 
.................... //; DT               EQU  H'0007' 
....................  
....................  
.................... //;----- PORTE Bits ----------------------------------------------------- 
.................... #define RE3              =  0x0003 
....................  
....................  
.................... //;----- LATA Bits ----------------------------------------------------- 
.................... #define LATA0            =  0x0000 
.................... #define LATA1            =  0x0001 
.................... #define LATA2            =  0x0002 
.................... #define LATA3            =  0x0003 
.................... #define LATA4            =  0x0004 
.................... #define LATA5            =  0x0005 
.................... #define LATA6            =  0x0006 
.................... #define LATA7            =  0x0007 
....................  
....................  
.................... //;----- LATB Bits ----------------------------------------------------- 
.................... #define LATB0            =  0x0000 
.................... #define LATB1            =  0x0001 
.................... #define LATB2            =  0x0002 
.................... #define LATB3            =  0x0003 
.................... #define LATB4            =  0x0004 
.................... #define LATB5            =  0x0005 
.................... #define LATB6            =  0x0006 
.................... #define LATB7            =  0x0007 
....................  
....................  
.................... //;----- LATC Bits ----------------------------------------------------- 
.................... #define LATC0            =  0x0000 
.................... #define LATC1            =  0x0001 
.................... #define LATC2            =  0x0002 
.................... #define LATC3            =  0x0003 
.................... #define LATC4            =  0x0004 
.................... #define LATC5            =  0x0005 
.................... #define LATC6            =  0x0006 
.................... #define LATC7            =  0x0007 
....................  
....................  
.................... //;----- DDRA Bits ----------------------------------------------------- 
.................... #define RA0              =  0x0000 
.................... #define RA1              =  0x0001 
.................... #define RA2              =  0x0002 
.................... #define RA3              =  0x0003 
.................... #define RA4              =  0x0004 
.................... #define RA5              =  0x0005 
.................... #define RA6              =  0x0006 
.................... #define RA7              =  0x0007 
....................  
....................  
.................... //;----- TRISA Bits ----------------------------------------------------- 
.................... #define TRISA0           =  0x0000 
.................... #define TRISA1           =  0x0001 
.................... #define TRISA2           =  0x0002 
.................... #define TRISA3           =  0x0003 
.................... #define TRISA4           =  0x0004 
.................... #define TRISA5           =  0x0005 
.................... #define TRISA6           =  0x0006 
.................... #define TRISA7           =  0x0007 
....................  
....................  
.................... //;----- DDRB Bits ----------------------------------------------------- 
.................... #define RB0              =  0x0000 
.................... #define RB1              =  0x0001 
.................... #define RB2              =  0x0002 
.................... #define RB3              =  0x0003 
.................... #define RB4              =  0x0004 
.................... #define RB5              =  0x0005 
.................... #define RB6              =  0x0006 
.................... #define RB7              =  0x0007 
....................  
....................  
.................... //;----- TRISB Bits ----------------------------------------------------- 
.................... #define TRISB0           =  0x0000 
.................... #define TRISB1           =  0x0001 
.................... #define TRISB2           =  0x0002 
.................... #define TRISB3           =  0x0003 
.................... #define TRISB4           =  0x0004 
.................... #define TRISB5           =  0x0005 
.................... #define TRISB6           =  0x0006 
.................... #define TRISB7           =  0x0007 
....................  
....................  
.................... //;----- DDRC Bits ----------------------------------------------------- 
.................... #define RC0              =  0x0000 
.................... #define RC1              =  0x0001 
.................... #define RC2              =  0x0002 
.................... #define RC3              =  0x0003 
.................... #define RC4              =  0x0004 
.................... #define RC5              =  0x0005 
.................... #define RC6              =  0x0006 
.................... #define RC7              =  0x0007 
....................  
....................  
.................... //;----- TRISC Bits ----------------------------------------------------- 
.................... #define TRISC0           =  0x0000 
.................... #define TRISC1           =  0x0001 
.................... #define TRISC2           =  0x0002 
.................... #define TRISC3           =  0x0003 
.................... #define TRISC4           =  0x0004 
.................... #define TRISC5           =  0x0005 
.................... #define TRISC6           =  0x0006 
.................... #define TRISC7           =  0x0007 
....................  
....................  
.................... //;----- OSCTUNE Bits ----------------------------------------------------- 
.................... #define TUN0             =  0x0000 
.................... #define TUN1             =  0x0001 
.................... #define TUN2             =  0x0002 
.................... #define TUN3             =  0x0003 
.................... #define TUN4             =  0x0004 
.................... #define PLLEN            =  0x0006 
.................... #define INTSRC           =  0x0007 
....................  
....................  
.................... //;----- PIE1 Bits ----------------------------------------------------- 
.................... #define TMR1IE           =  0x0000 
.................... #define TMR2IE           =  0x0001 
.................... #define CCP1IE           =  0x0002 
.................... #define SSPIE            =  0x0003 
.................... #define TXIE             =  0x0004 
.................... #define RCIE             =  0x0005 
.................... #define ADIE             =  0x0006 
....................  
....................  
.................... //;----- PIR1 Bits ----------------------------------------------------- 
.................... #define TMR1IF           =  0x0000 
.................... #define TMR2IF           =  0x0001 
.................... #define CCP1IF           =  0x0002 
.................... #define SSPIF            =  0x0003 
.................... #define TXIF             =  0x0004 
.................... #define RCIF             =  0x0005 
.................... #define ADIF             =  0x0006 
....................  
....................  
.................... //;----- IPR1 Bits ----------------------------------------------------- 
.................... #define TMR1IP           =  0x0000 
.................... #define TMR2IP           =  0x0001 
.................... #define CCP1IP           =  0x0002 
.................... #define SSPIP            =  0x0003 
.................... #define TXIP             =  0x0004 
.................... #define RCIP             =  0x0005 
.................... #define ADIP             =  0x0006 
....................  
....................  
.................... //;----- PIE2 Bits ----------------------------------------------------- 
.................... #define CCP2IE           =  0x0000 
.................... #define TMR3IE           =  0x0001 
.................... #define LVDIE            =  0x0002 
.................... #define BCLIE            =  0x0003 
.................... #define CMIE             =  0x0006 
.................... #define OSCFIE           =  0x0007 
....................  
.................... #define HLVDIE           =  0x0002 
....................  
....................  
.................... //;----- PIR2 Bits ----------------------------------------------------- 
.................... #define CCP2IF           =  0x0000 
.................... #define TMR3IF           =  0x0001 
.................... #define LVDIF            =  0x0002 
.................... #define BCLIF            =  0x0003 
.................... #define CMIF             =  0x0006 
.................... #define OSCFIF           =  0x0007 
....................  
.................... #define HLVDIF           =  0x0002 
....................  
....................  
.................... //;----- IPR2 Bits ----------------------------------------------------- 
.................... #define CCP2IP           =  0x0000 
.................... #define TMR3IP           =  0x0001 
.................... #define LVDIP            =  0x0002 
.................... #define BCLIP            =  0x0003 
.................... #define CMIP             =  0x0006 
.................... #define OSCFIP           =  0x0007 
....................  
.................... #define HLVDIP           =  0x0002 
....................  
....................  
.................... //;----- RCSTA Bits ----------------------------------------------------- 
.................... #define RX9D             =  0x0000 
.................... #define OERR             =  0x0001 
.................... #define FERR             =  0x0002 
.................... #define ADEN             =  0x0003 
.................... #define CREN             =  0x0004 
.................... #define SREN             =  0x0005 
.................... #define RX9              =  0x0006 
.................... #define SPEN             =  0x0007 
....................  
.................... #define ADDEN            =  0x0003 
....................  
....................  
.................... //;----- TXSTA Bits ----------------------------------------------------- 
.................... #define TX9D             =  0x0000 
.................... #define TRMT             =  0x0001 
.................... #define BRGH             =  0x0002 
.................... #define SENDB            =  0x0003 
.................... #define SYNC             =  0x0004 
.................... #define TXEN             =  0x0005 
.................... #define TX9              =  0x0006 
.................... #define CSRC             =  0x0007 
....................  
....................  
.................... //;----- T3CON Bits ----------------------------------------------------- 
.................... #define TMR3ON           =  0x0000 
.................... #define TMR3CS           =  0x0001 
.................... #define T3SYNC           =  0x0002 
.................... #define T3CCP1           =  0x0003 
.................... #define T3CKPS0          =  0x0004 
.................... #define T3CKPS1          =  0x0005 
.................... #define T3CCP2           =  0x0006 
.................... #define RD16             =  0x0007 
....................  
.................... #define NOT_T3SYNC       =  0x0002 
....................  
.................... //;----- CMCON Bits ----------------------------------------------------- 
.................... #define CM0              =  0x0000 
.................... #define CM1              =  0x0001 
.................... #define CM2              =  0x0002 
.................... #define CIS              =  0x0003 
.................... #define C1INV            =  0x0004 
.................... #define C2INV            =  0x0005 
.................... #define C1OUT            =  0x0006 
.................... #define C2OUT            =  0x0007 
....................  
....................  
.................... //;----- CVRCON Bits ----------------------------------------------------- 
.................... #define CVR0             =  0x0000 
.................... #define CVR1             =  0x0001 
.................... #define CVR2             =  0x0002 
.................... #define CVR3             =  0x0003 
.................... #define CVRSS            =  0x0004 
.................... #define CVRR             =  0x0005 
.................... #define CVROE            =  0x0006 
.................... #define CVREN            =  0x0007 
....................  
....................  
.................... //;----- PWM1CON Bits ----------------------------------------------------- 
.................... #define PRSEN            =  0x0007 
....................  
....................  
.................... //;----- BAUDCON Bits ----------------------------------------------------- 
.................... #define ABDEN            =  0x0000 
.................... #define WUE              =  0x0001 
.................... #define BRG16            =  0x0003 
.................... #define SCKP             =  0x0004 
.................... #define RCIDL            =  0x0006 
.................... #define ABDOVF           =  0x0007 
....................  
.................... #define TXCKP            =  0x0004 
.................... #define RXDTP            =  0x0005 
.................... #define RCMT             =  0x0006 
....................  
....................  
.................... //;----- BAUDCTL Bits ----------------------------------------------------- 
.................... #define ABDEN            =  0x0000 
.................... #define WUE              =  0x0001 
.................... #define BRG16            =  0x0003 
.................... #define SCKP             =  0x0004 
.................... #define RCIDL            =  0x0006 
.................... #define ABDOVF           =  0x0007 
....................  
.................... #define TXCKP            =  0x0004 
.................... #define RXDTP            =  0x0005 
.................... #define RCMT             =  0x0006 
....................  
....................  
.................... //;----- CCP2CON Bits ----------------------------------------------------- 
.................... #define CCP2M0           =  0x0000 
.................... #define CCP2M1           =  0x0001 
.................... #define CCP2M2           =  0x0002 
.................... #define CCP2M3           =  0x0003 
.................... #define CCP2Y            =  0x0004 
.................... #define CCP2X            =  0x0005 
....................  
.................... #define DC2B0            =  0x0004 
.................... #define DC2B1            =  0x0005 
....................  
....................  
.................... //;----- CCP1CON Bits ----------------------------------------------------- 
.................... #define CCP1M0           =  0x0000 
.................... #define CCP1M1           =  0x0001 
.................... #define CCP1M2           =  0x0002 
.................... #define CCP1M3           =  0x0003 
.................... #define CCP1Y            =  0x0004 
.................... #define CCP1X            =  0x0005 
....................  
.................... #define DC1B0            =  0x0004 
.................... #define DC1B1            =  0x0005 
....................  
....................  
.................... //;----- ADCON2 Bits ----------------------------------------------------- 
.................... #define ADCS0            =  0x0000 
.................... #define ADCS1            =  0x0001 
.................... #define ADCS2            =  0x0002 
.................... #define ACQT0            =  0x0003 
.................... #define ACQT1            =  0x0004 
.................... #define ACQT2            =  0x0005 
.................... #define ADFM             =  0x0007 
....................  
....................  
.................... //;----- ADCON1 Bits ----------------------------------------------------- 
.................... #define PCFG0            =  0x0000 
.................... #define PCFG1            =  0x0001 
.................... #define PCFG2            =  0x0002 
.................... #define PCFG3            =  0x0003 
.................... #define VCFG0            =  0x0004 
.................... #define VCFG1            =  0x0005 
....................  
....................  
.................... //;----- ADCON0 Bits ----------------------------------------------------- 
.................... #define ADON             =  0x0000 
.................... #define GO               =  0x0001 
.................... #define CHS0             =  0x0002 
.................... #define CHS1             =  0x0003 
.................... #define CHS2             =  0x0004 
.................... #define CHS3             =  0x0005 
....................  
.................... #define DONE             =  0x0001 
....................  
.................... #define NOT_DONE         =  0x0001 
....................  
.................... #define GO_DONE          =  0x0001 
....................  
....................  
.................... //;----- SSPCON2 Bits ----------------------------------------------------- 
.................... #define SEN              =  0x0000 
.................... #define RSEN             =  0x0001 
.................... #define PEN              =  0x0002 
.................... #define RCEN             =  0x0003 
.................... #define ACKEN            =  0x0004 
.................... #define ACKDT            =  0x0005 
.................... #define ACKSTAT          =  0x0006 
.................... #define GCEN             =  0x0007 
....................  
....................  
.................... //;----- SSPCON1 Bits ----------------------------------------------------- 
.................... #define SSPM0            =  0x0000 
.................... #define SSPM1            =  0x0001 
.................... #define SSPM2            =  0x0002 
.................... #define SSPM3            =  0x0003 
.................... #define CKP              =  0x0004 
.................... #define SSPEN            =  0x0005 
.................... #define SSPOV            =  0x0006 
.................... #define WCOL             =  0x0007 
....................  
....................  
.................... //;----- SSPSTAT Bits ----------------------------------------------------- 
.................... #define BF               =  0x0000 
.................... #define UA               =  0x0001 
.................... #define R                =  0x0002 
.................... #define S                =  0x0003 
.................... #define P                =  0x0004 
.................... #define D                =  0x0005 
.................... #define CKE              =  0x0006 
.................... #define SMP              =  0x0007 
....................  
....................  
.................... #define NOT_W            =  0x0002 
.................... #define NOT_A            =  0x0005 
....................  
.................... #define R_W              =  0x0002 
.................... #define D_A              =  0x0005 
....................  
.................... #define NOT_WRITE        =  0x0002 
.................... #define NOT_ADDRESS      =  0x0005 
....................  
....................  
.................... //;----- T2CON Bits ----------------------------------------------------- 
.................... #define T2CKPS0          =  0x0000 
.................... #define T2CKPS1          =  0x0001 
.................... #define TMR2ON           =  0x0002 
.................... #define T2OUTPS0         =  0x0003 
.................... #define T2OUTPS1         =  0x0004 
.................... #define T2OUTPS2         =  0x0005 
.................... #define T2OUTPS3         =  0x0006 
....................  
.................... #define TOUTPS0          =  0x0003 
.................... #define TOUTPS1          =  0x0004 
.................... #define TOUTPS2          =  0x0005 
.................... #define TOUTPS3          =  0x0006 
....................  
....................  
.................... //;----- T1CON Bits ----------------------------------------------------- 
.................... #define TMR1ON           =  0x0000 
.................... #define TMR1CS           =  0x0001 
.................... #define T1SYNC           =  0x0002 
.................... #define T1OSCEN          =  0x0003 
.................... #define T1CKPS0          =  0x0004 
.................... #define T1CKPS1          =  0x0005 
.................... #define T1RUN            =  0x0006 
.................... #define RD16             =  0x0007 
....................  
.................... #define NOT_T1SYNC       =  0x0002 
....................  
....................  
.................... //;----- RCON Bits ----------------------------------------------------- 
.................... #define BOR              =  0x0000 
.................... #define POR              =  0x0001 
.................... #define PD               =  0x0002 
.................... #define TO               =  0x0003 
.................... #define RI               =  0x0004 
.................... #define SBOREN           =  0x0006 
.................... #define IPEN             =  0x0007 
....................  
.................... #define NOT_BOR          =  0x0000 
.................... #define NOT_POR          =  0x0001 
.................... #define NOT_PD           =  0x0002 
.................... #define NOT_TO           =  0x0003 
.................... #define NOT_RI           =  0x0004 
....................  
....................  
.................... //;----- WDTCON Bits ----------------------------------------------------- 
.................... #define SWDTEN           =  0x0000 
....................  
.................... #define SWDTE            =  0x0000 
....................  
....................  
.................... //;----- HLVDCON Bits ----------------------------------------------------- 
.................... #define LVDL0            =  0x0000 
.................... #define LVDL1            =  0x0001 
.................... #define LVDL2            =  0x0002 
.................... #define LVDL3            =  0x0003 
.................... #define LVDEN            =  0x0004 
.................... #define IRVST            =  0x0005 
....................  
.................... #define LVV0             =  0x0000 
.................... #define LVV1             =  0x0001 
.................... #define LVV2             =  0x0002 
.................... #define LVV3             =  0x0003 
.................... #define BGST             =  0x0005 
....................  
.................... #define HLVDL0           =  0x0000 
.................... #define HLVDL1           =  0x0001 
.................... #define HLVDL2           =  0x0002 
.................... #define HLVDL3           =  0x0003 
.................... #define HLVDEN           =  0x0004 
.................... #define VDIRMAG          =  0x0007 
....................  
.................... #define IVRST            =  0x0005 
....................  
....................  
.................... //;----- LVDCON Bits ----------------------------------------------------- 
.................... #define LVDL0            =  0x0000 
.................... #define LVDL1            =  0x0001 
.................... #define LVDL2            =  0x0002 
.................... #define LVDL3            =  0x0003 
.................... #define LVDEN            =  0x0004 
.................... #define IRVST            =  0x0005 
....................  
.................... #define LVV0             =  0x0000 
.................... #define LVV1             =  0x0001 
.................... #define LVV2             =  0x0002 
.................... #define LVV3             =  0x0003 
.................... #define BGST             =  0x0005 
....................  
.................... #define HLVDL0           =  0x0000 
.................... #define HLVDL1           =  0x0001 
.................... #define HLVDL2           =  0x0002 
.................... #define HLVDL3           =  0x0003 
.................... #define HLVDEN           =  0x0004 
.................... #define VDIRMAG          =  0x0007 
....................  
.................... #define IVRST            =  0x0005 
....................  
....................  
.................... //;----- OSCCON Bits ----------------------------------------------------- 
.................... #define SCS0             =  0x0000 
.................... #define SCS1             =  0x0001 
.................... #define FLTS             =  0x0002 
.................... #define OSTS             =  0x0003 
.................... #define IRCF0            =  0x0004 
.................... #define IRCF1            =  0x0005 
.................... #define IRCF2            =  0x0006 
.................... #define IDLEN            =  0x0007 
....................  
.................... #define IOFS             =  0x0002 
....................  
....................  
.................... //;----- T0CON Bits ----------------------------------------------------- 
.................... #define T0PS0            =  0x0000 
.................... #define T0PS1            =  0x0001 
.................... #define T0PS2            =  0x0002 
.................... #define T0PS3            =  0x0003 
.................... #define T0SE             =  0x0004 
.................... #define T0CS             =  0x0005 
.................... #define T016BIT          =  0x0006 
.................... #define TMR0ON           =  0x0007 
....................  
.................... #define PSA              =  0x0003 
.................... #define T08BIT           =  0x0006 
....................  
....................  
.................... //;----- STATUS Bits ----------------------------------------------------- 
.................... #define C                =  0x0000 
.................... #define DC               =  0x0001 
.................... #define Z                =  0x0002 
.................... #define OV               =  0x0003 
.................... #define N                =  0x0004 
....................  
....................  
.................... //;----- INTCON3 Bits ----------------------------------------------------- 
.................... #define INT1F            =  0x0000 
.................... #define INT2F            =  0x0001 
.................... #define INT1E            =  0x0003 
.................... #define INT2E            =  0x0004 
.................... #define INT1P            =  0x0006 
.................... #define INT2P            =  0x0007 
....................  
.................... #define INT1IF           =  0x0000 
.................... #define INT2IF           =  0x0001 
.................... #define INT1IE           =  0x0003 
.................... #define INT2IE           =  0x0004 
.................... #define INT1IP           =  0x0006 
.................... #define INT2IP           =  0x0007 
....................  
....................  
.................... //;----- INTCON2 Bits ----------------------------------------------------- 
.................... #define RBIP             =  0x0000 
.................... #define TMR0IP           =  0x0002 
.................... #define INTEDG2          =  0x0004 
.................... #define INTEDG1          =  0x0005 
.................... #define INTEDG0          =  0x0006 
.................... #define RBPU             =  0x0007 
....................  
.................... #define NOT_RBPU         =  0x0007 
....................  
....................  
.................... //;----- INTCON Bits ----------------------------------------------------- 
.................... #define RBIF             =  0x0000 
.................... #define INT0F            =  0x0001 
.................... #define TMR0IF           =  0x0002 
.................... #define RBIE             =  0x0003 
.................... #define INT0E            =  0x0004 
.................... #define TMR0IE           =  0x0005 
.................... #define PEIE             =  0x0006 
.................... #define GIE              =  0x0007 
....................  
.................... #define INT0IF           =  0x0001 
.................... #define T0IF             =  0x0002 
.................... #define INT0IE           =  0x0004 
.................... #define T0IE             =  0x0005 
.................... #define GIEL             =  0x0006 
.................... #define GIEH             =  0x0007 
....................  
....................  
.................... //;----- STKPTR Bits ----------------------------------------------------- 
.................... #define SP0              =  0x0000 
.................... #define SP1              =  0x0001 
.................... #define SP2              =  0x0002 
.................... #define SP3              =  0x0003 
.................... #define SP4              =  0x0004 
.................... #define STKUNF           =  0x0006 
.................... #define STKFUL           =  0x0007 
....................  
.................... #define STKOVF           =  0x0007 
....................  
....................  
....................  
.................... /*;========================================================================== 
.................... ; 
.................... ;       RAM Definitions 
.................... ; 
.................... ;========================================================================== 
....................        __MAXRAM  H'0FFF' 
....................        __BADRAM  H'0F83' 
....................        __BADRAM  H'0F85'-H'0F88' 
....................        __BADRAM  H'0F8C'-H'0F91' 
....................        __BADRAM  H'0F95'-H'0F9A' 
....................        __BADRAM  H'0F9C' 
....................        __BADRAM  H'0FA3'-H'0FAA' 
....................        __BADRAM  H'0FB6' 
....................        __BADRAM  H'0FB9' 
....................        __BADRAM  H'0FD4' 
....................  
.................... ;========================================================================== 
.................... ; 
.................... ;   IMPORTANT: For the PIC18 devices, the __CONFIG directive has been 
.................... ;              superseded by the CONFIG directive.  The following settings 
.................... ;              are available for this device. 
.................... ; 
.................... ;   Oscillator Selection bits: 
.................... ;     OSC = LP             LP oscillator 
.................... ;     OSC = XT             XT oscillator 
.................... ;     OSC = HS             HS oscillator 
.................... ;     OSC = RC             External RC oscillator, CLKO function on RA6 
.................... ;     OSC = EC             EC oscillator, CLKO function on RA6 
.................... ;     OSC = ECIO6          EC oscillator, port function on RA6 
.................... ;     OSC = HSPLL          HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1) 
.................... ;     OSC = RCIO6          External RC oscillator, port function on RA6 
.................... ;     OSC = INTIO67        Internal oscillator block, port function on RA6 and RA7 
.................... ;     OSC = INTIO7         Internal oscillator block, CLKO function on RA6, port function on RA7 
.................... ; 
.................... ;   Fail-Safe Clock Monitor Enable bit: 
.................... ;     FCMEN = OFF          Fail-Safe Clock Monitor disabled 
.................... ;     FCMEN = ON           Fail-Safe Clock Monitor enabled 
.................... ; 
.................... ;   Internal/External Oscillator Switchover bit: 
.................... ;     IESO = OFF           Oscillator Switchover mode disabled 
.................... ;     IESO = ON            Oscillator Switchover mode enabled 
.................... ; 
.................... ;   Power-up Timer Enable bit: 
.................... ;     PWRT = ON            PWRT enabled 
.................... ;     PWRT = OFF           PWRT disabled 
.................... ; 
.................... ;   Brown-out Reset Enable bits: 
.................... ;     BOREN = OFF          Brown-out Reset disabled in hardware and software 
.................... ;     BOREN = ON           Brown-out Reset enabled and controlled by software (SBOREN is enabled) 
.................... ;     BOREN = NOSLP        Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled) 
.................... ;     BOREN = SBORDIS      Brown-out Reset enabled in hardware only (SBOREN is disabled) 
.................... ; 
.................... ;   Brown-out Voltage bits: 
.................... ;     BORV = 0             Maximum setting 
.................... ;     BORV = 1              
.................... ;     BORV = 2              
.................... ;     BORV = 3             Minimum setting 
.................... ; 
.................... ;   Watchdog Timer Enable bit: 
.................... ;     WDT = OFF            WDT disabled (control is placed on the SWDTEN bit) 
.................... ;     WDT = ON             WDT enabled 
.................... ; 
.................... ;   Watchdog Timer Postscale Select bits: 
.................... ;     WDTPS = 1            1:1 
.................... ;     WDTPS = 2            1:2 
.................... ;     WDTPS = 4            1:4 
.................... ;     WDTPS = 8            1:8 
.................... ;     WDTPS = 16           1:16 
.................... ;     WDTPS = 32           1:32 
.................... ;     WDTPS = 64           1:64 
.................... ;     WDTPS = 128          1:128 
.................... ;     WDTPS = 256          1:256 
.................... ;     WDTPS = 512          1:512 
.................... ;     WDTPS = 1024         1:1024 
.................... ;     WDTPS = 2048         1:2048 
.................... ;     WDTPS = 4096         1:4096 
.................... ;     WDTPS = 8192         1:8192 
.................... ;     WDTPS = 16384        1:16384 
.................... ;     WDTPS = 32768        1:32768 
.................... ; 
.................... ;   MCLR Pin Enable bit: 
.................... ;     MCLRE = OFF          RE3 input pin enabled; MCLR disabled 
.................... ;     MCLRE = ON           MCLR pin enabled; RE3 input pin disabled 
.................... ; 
.................... ;   Low-Power Timer1 Oscillator Enable bit: 
.................... ;     LPT1OSC = OFF        Timer1 configured for higher power operation 
.................... ;     LPT1OSC = ON         Timer1 configured for low-power operation 
.................... ; 
.................... ;   PORTB A/D Enable bit: 
.................... ;     PBADEN = OFF         PORTB<4:0> pins are configured as digital I/O on Reset 
.................... ;     PBADEN = ON          PORTB<4:0> pins are configured as analog input channels on Reset 
.................... ; 
.................... ;   CCP2 MUX bit: 
.................... ;     CCP2MX = PORTBE      CCP2 input/output is multiplexed with RB3 
.................... ;     CCP2MX = PORTC       CCP2 input/output is multiplexed with RC1 
.................... ; 
.................... ;   Stack Full/Underflow Reset Enable bit: 
.................... ;     STVREN = OFF         Stack full/underflow will not cause Reset 
.................... ;     STVREN = ON          Stack full/underflow will cause Reset 
.................... ; 
.................... ;   Single-Supply ICSP Enable bit: 
.................... ;     LVP = OFF            Single-Supply ICSP disabled 
.................... ;     LVP = ON             Single-Supply ICSP enabled 
.................... ; 
.................... ;   Extended Instruction Set Enable bit: 
.................... ;     XINST = OFF          Instruction set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... ;     XINST = ON           Instruction set extension and Indexed Addressing mode enabled 
.................... ; 
.................... ;   Background Debugger Enable bit: 
.................... ;     DEBUG = ON           Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug 
.................... ;     DEBUG = OFF          Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins 
.................... ; 
.................... ;   Code Protection bit Block 0: 
.................... ;     CP0 = ON             Block 0 (000800-003FFFh) code-protected 
.................... ;     CP0 = OFF            Block 0 (000800-003FFFh) not code-protected 
.................... ; 
.................... ;   Code Protection bit Block 1: 
.................... ;     CP1 = ON             Block 1 (004000-007FFFh) code-protected 
.................... ;     CP1 = OFF            Block 1 (004000-007FFFh) not code-protected 
.................... ; 
.................... ;   Code Protection bit Block 2: 
.................... ;     CP2 = ON             Block 2 (008000-00BFFFh) code-protected 
.................... ;     CP2 = OFF            Block 2 (008000-00BFFFh) not code-protected 
.................... ; 
.................... ;   Boot Block Code Protection bit: 
.................... ;     CPB = ON             Boot block (000000-0007FFh) code-protected 
.................... ;     CPB = OFF            Boot block (000000-0007FFh) not code-protected 
.................... ; 
.................... ;   Write Protection bit Block 0: 
.................... ;     WRT0 = ON            Block 0 (000800-003FFFh) write-protected 
.................... ;     WRT0 = OFF           Block 0 (000800-003FFFh) not write-protected 
.................... ; 
.................... ;   Write Protection bit Block 1: 
.................... ;     WRT1 = ON            Block 1 (004000-007FFFh) write-protected 
.................... ;     WRT1 = OFF           Block 1 (004000-007FFFh) not write-protected 
.................... ; 
.................... ;   Write Protection bit Block 2: 
.................... ;     WRT2 = ON            Block 2 (008000-00BFFFh) write-protected 
.................... ;     WRT2 = OFF           Block 2 (008000-00BFFFh) not write-protected 
.................... ; 
.................... ;   Boot Block Write Protection bit: 
.................... ;     WRTB = ON            Boot block (000000-0007FFh) write-protected 
.................... ;     WRTB = OFF           Boot block (000000-0007FFh) not write-protected 
.................... ; 
.................... ;   Configuration Register Write Protection bit: 
.................... ;     WRTC = ON            Configuration registers (300000-3000FFh) write-protected 
.................... ;     WRTC = OFF           Configuration registers (300000-3000FFh) not write-protected 
.................... ; 
.................... ;   Table Read Protection bit Block 0: 
.................... ;     EBTR0 = ON           Block 0 (000800-003FFFh) protected from table reads executed in other blocks 
.................... ;     EBTR0 = OFF          Block 0 (000800-003FFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Table Read Protection bit Block 1: 
.................... ;     EBTR1 = ON           Block 1 (004000-007FFFh) protected from table reads executed in other blocks 
.................... ;     EBTR1 = OFF          Block 1 (004000-007FFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Table Read Protection bit Block 2: 
.................... ;     EBTR2 = ON           Block 2 (008000-00BFFFh) protected from table reads executed in other blocks 
.................... ;     EBTR2 = OFF          Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;   Boot Block Table Read Protection bit: 
.................... ;     EBTRB = ON           Boot block (000000-0007FFh) protected from table reads executed in other blocks 
.................... ;     EBTRB = OFF          Boot block (000000-0007FFh) not protected from table reads executed in other blocks 
.................... ; 
.................... ;========================================================================== 
.................... ;========================================================================== 
.................... ; 
.................... ;       Configuration Bits 
.................... ; 
.................... ;   NAME            Address 
.................... ;   CONFIG1H        300001h 
.................... ;   CONFIG2L        300002h 
.................... ;   CONFIG2H        300003h 
.................... ;   CONFIG3H        300005h 
.................... ;   CONFIG4L        300006h 
.................... ;   CONFIG5L        300008h 
.................... ;   CONFIG5H        300009h 
.................... ;   CONFIG6L        30000Ah 
.................... ;   CONFIG6H        30000Bh 
.................... ;   CONFIG7L        30000Ch 
.................... ;   CONFIG7H        30000Dh 
.................... ; 
.................... ;==========================================================================*/ 
....................  
.................... //; The following is an assignment of address values for all of the 
.................... //; configuration registers for the purpose of table reads 
.................... //_CONFIG1H        =  0x300001 
.................... //_CONFIG2L        =  0x300002 
.................... //_CONFIG2H        =  0x300003 
.................... //_CONFIG3H        =  0x300005 
.................... //_CONFIG4L        =  0x300006 
.................... //_CONFIG5L        =  0x300008 
.................... //_CONFIG5H        =  0x300009 
.................... //_CONFIG6L        =  0x30000A 
.................... //_CONFIG6H        =  0x30000B 
.................... //_CONFIG7L        =  0x30000C 
.................... //_CONFIG7H        =  0x30000D 
....................  
.................... //;----- CONFIG1H Options -------------------------------------------------- 
.................... //_OSC_LP_1H           =  0xF0    //; LP oscillator 
.................... //_OSC_XT_1H           =  0xF1    //; XT oscillator 
.................... //_OSC_HS_1H           =  0xF2    //; HS oscillator 
.................... //_OSC_RC_1H           =  0xF3    //; External RC oscillator, CLKO function on RA6 
.................... //_OSC_EC_1H           =  0xF4    //; EC oscillator, CLKO function on RA6 
.................... //_OSC_ECIO6_1H        =  0xF5    //; EC oscillator, port function on RA6 
.................... //_OSC_HSPLL_1H        =  0xF6    //; HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1) 
.................... //_OSC_RCIO6_1H        =  0xF7    //; External RC oscillator, port function on RA6 
.................... //_OSC_INTIO67_1H      =  0xF8    //; Internal oscillator block, port function on RA6 and RA7 
.................... //_OSC_INTIO7_1H       =  0xF9    //; Internal oscillator block, CLKO function on RA6, port function on RA7 
....................  
.................... //_FCMEN_OFF_1H        =  0xBF    //; Fail-Safe Clock Monitor disabled 
.................... //_FCMEN_ON_1H         =  0xFF    //; Fail-Safe Clock Monitor enabled 
....................  
.................... //_IESO_OFF_1H         =  0x7F    //; Oscillator Switchover mode disabled 
.................... //_IESO_ON_1H          =  0xFF    //; Oscillator Switchover mode enabled 
....................  
.................... //;----- CONFIG2L Options -------------------------------------------------- 
.................... //_PWRT_ON_2L          =  0xFE    //; PWRT enabled 
.................... //_PWRT_OFF_2L         =  0xFF    //; PWRT disabled 
....................  
.................... //_BOREN_OFF_2L        =  0xF9    //; Brown-out Reset disabled in hardware and software 
.................... //_BOREN_ON_2L         =  0xFB    //; Brown-out Reset enabled and controlled by software (SBOREN is enabled) 
.................... //_BOREN_NOSLP_2L      =  0xFD    //; Brown-out Reset enabled in hardware only and disabled in Sleep mode (SBOREN is disabled) 
.................... //_BOREN_SBORDIS_2L    =  0xFF    //; Brown-out Reset enabled in hardware only (SBOREN is disabled) 
....................  
.................... //_BORV_0_2L           =  0xE7    //; Maximum setting 
.................... //_BORV_1_2L           =  0xEF    //;  
.................... //_BORV_2_2L           =  0xF7    //;  
.................... //_BORV_3_2L           =  0xFF    //; Minimum setting 
....................  
.................... //;----- CONFIG2H Options -------------------------------------------------- 
.................... //_WDT_OFF_2H          =  0xFE    //; WDT disabled (control is placed on the SWDTEN bit) 
.................... //_WDT_ON_2H           =  0xFF    //; WDT enabled 
....................  
.................... //_WDTPS_1_2H          =  0xE1    //; 1:1 
.................... //_WDTPS_2_2H          =  0xE3    //; 1:2 
.................... //_WDTPS_4_2H          =  0xE5    //; 1:4 
.................... //_WDTPS_8_2H          =  0xE7    //; 1:8 
.................... //_WDTPS_16_2H         =  0xE9    //; 1:16 
.................... //_WDTPS_32_2H         =  0xEB    //; 1:32 
.................... //_WDTPS_64_2H         =  0xED    //; 1:64 
.................... //_WDTPS_128_2H        =  0xEF    //; 1:128 
.................... //_WDTPS_256_2H        =  0xF1    //; 1:256 
.................... //_WDTPS_512_2H        =  0xF3    //; 1:512 
.................... //_WDTPS_1024_2H       =  0xF5    //; 1:1024 
.................... //_WDTPS_2048_2H       =  0xF7    //; 1:2048 
.................... //_WDTPS_4096_2H       =  0xF9    //; 1:4096 
.................... //_WDTPS_8192_2H       =  0xFB    //; 1:8192 
.................... //_WDTPS_16384_2H      =  0xFD    //; 1:16384 
.................... //_WDTPS_32768_2H      =  0xFF    //; 1:32768 
....................  
.................... //;----- CONFIG3H Options -------------------------------------------------- 
.................... //_MCLRE_OFF_3H        =  0x7F    //; RE3 input pin enabled; MCLR disabled 
.................... //_MCLRE_ON_3H         =  0xFF    //; MCLR pin enabled; RE3 input pin disabled 
....................  
.................... //_LPT1OSC_OFF_3H      =  0xFB    //; Timer1 configured for higher power operation 
.................... //_LPT1OSC_ON_3H       =  0xFF    //; Timer1 configured for low-power operation 
....................  
.................... //_PBADEN_OFF_3H       =  0xFD    //; PORTB<4:0> pins are configured as digital I/O on Reset 
.................... //_PBADEN_ON_3H        =  0xFF    //; PORTB<4:0> pins are configured as analog input channels on Reset 
....................  
.................... //_CCP2MX_PORTBE_3H    =  0xFE    //; CCP2 input/output is multiplexed with RB3 
.................... //_CCP2MX_PORTC_3H     =  0xFF    //; CCP2 input/output is multiplexed with RC1 
....................  
.................... //;----- CONFIG4L Options -------------------------------------------------- 
.................... //_STVREN_OFF_4L       =  0xFE    //; Stack full/underflow will not cause Reset 
.................... //_STVREN_ON_4L        =  0xFF    //; Stack full/underflow will cause Reset 
....................  
.................... //_LVP_OFF_4L          =  0xFB    //; Single-Supply ICSP disabled 
.................... //_LVP_ON_4L           =  0xFF    //; Single-Supply ICSP enabled 
....................  
.................... //_XINST_OFF_4L        =  0xBF    //; Instruction set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... //_XINST_ON_4L         =  0xFF    //; Instruction set extension and Indexed Addressing mode enabled 
....................  
.................... //_DEBUG_ON_4L         =  0x7F    //; Background debugger enabled, RB6 and RB7 are dedicated to In-Circuit Debug 
.................... //_DEBUG_OFF_4L        =  0xFF    //; Background debugger disabled, RB6 and RB7 configured as general purpose I/O pins 
....................  
.................... //;----- CONFIG5L Options -------------------------------------------------- 
.................... //_CP0_ON_5L           =  0xFE    //; Block 0 (000800-003FFFh) code-protected 
.................... //_CP0_OFF_5L          =  0xFF    //; Block 0 (000800-003FFFh) not code-protected 
....................  
.................... //_CP1_ON_5L           =  0xFD    //; Block 1 (004000-007FFFh) code-protected 
.................... //_CP1_OFF_5L          =  0xFF    //; Block 1 (004000-007FFFh) not code-protected 
....................  
.................... //_CP2_ON_5L           =  0xFB    //; Block 2 (008000-00BFFFh) code-protected 
.................... //_CP2_OFF_5L          =  0xFF    //; Block 2 (008000-00BFFFh) not code-protected 
....................  
.................... //;----- CONFIG5H Options -------------------------------------------------- 
.................... //_CPB_ON_5H           =  0xBF    //; Boot block (000000-0007FFh) code-protected 
.................... //_CPB_OFF_5H          =  0xFF    //; Boot block (000000-0007FFh) not code-protected 
....................  
.................... //;----- CONFIG6L Options -------------------------------------------------- 
.................... //_WRT0_ON_6L          =  0xFE    //; Block 0 (000800-003FFFh) write-protected 
.................... //_WRT0_OFF_6L         =  0xFF    //; Block 0 (000800-003FFFh) not write-protected 
....................  
.................... //_WRT1_ON_6L          =  0xFD    //; Block 1 (004000-007FFFh) write-protected 
.................... //_WRT1_OFF_6L         =  0xFF    //; Block 1 (004000-007FFFh) not write-protected 
....................  
.................... //_WRT2_ON_6L          =  0xFB    //; Block 2 (008000-00BFFFh) write-protected 
.................... //_WRT2_OFF_6L         =  0xFF    //; Block 2 (008000-00BFFFh) not write-protected 
....................  
.................... //;----- CONFIG6H Options -------------------------------------------------- 
.................... //_WRTB_ON_6H          =  0xBF    //; Boot block (000000-0007FFh) write-protected 
.................... //_WRTB_OFF_6H         =  0xFF    //; Boot block (000000-0007FFh) not write-protected 
....................  
.................... //_WRTC_ON_6H          =  0xDF    //; Configuration registers (300000-3000FFh) write-protected 
.................... //_WRTC_OFF_6H         =  0xFF    //; Configuration registers (300000-3000FFh) not write-protected 
....................  
.................... //;----- CONFIG7L Options -------------------------------------------------- 
.................... //_EBTR0_ON_7L         =  0xFE    //; Block 0 (000800-003FFFh) protected from table reads executed in other blocks 
.................... //_EBTR0_OFF_7L        =  0xFF    //; Block 0 (000800-003FFFh) not protected from table reads executed in other blocks 
....................  
.................... //_EBTR1_ON_7L         =  0xFD    //; Block 1 (004000-007FFFh) protected from table reads executed in other blocks 
.................... //_EBTR1_OFF_7L        =  0xFF    //; Block 1 (004000-007FFFh) not protected from table reads executed in other blocks 
....................  
.................... //_EBTR2_ON_7L         =  0xFB    //; Block 2 (008000-00BFFFh) protected from table reads executed in other blocks 
.................... //_EBTR2_OFF_7L        =  0xFF    //; Block 2 (008000-00BFFFh) not protected from table reads executed in other blocks 
....................  
.................... //;----- CONFIG7H Options -------------------------------------------------- 
.................... //_EBTRB_ON_7H         =  0xBF    //; Boot block (000000-0007FFh) protected from table reads executed in other blocks 
.................... //_EBTRB_OFF_7H        =  0xFF    //; Boot block (000000-0007FFh) not protected from table reads executed in other blocks 
....................  
....................  
.................... //_DEVID1          =  0x3FFFFE 
.................... //_DEVID2          =  0x3FFFFF 
....................  
.................... //_IDLOC0          =  0x200000 
.................... //_IDLOC1          =  0x200001 
.................... //_IDLOC2          =  0x200002 
.................... //_IDLOC3          =  0x200003 
.................... //_IDLOC4          =  0x200004 
.................... //_IDLOC5          =  0x200005 
.................... //_IDLOC6          =  0x200006 
.................... //_IDLOC7          =  0x200007 
....................  
....................  //       LIST 
....................  
....................  
.................... #use delay(internal = 8000000) 
*
025A:  CLRF   FEA
025C:  MOVLW  64
025E:  MOVWF  FE9
0260:  MOVF   FEF,W
0262:  BZ    027E
0264:  MOVLW  02
0266:  MOVWF  01
0268:  CLRF   00
026A:  DECFSZ 00,F
026C:  BRA    026A
026E:  DECFSZ 01,F
0270:  BRA    0268
0272:  MOVLW  97
0274:  MOVWF  00
0276:  DECFSZ 00,F
0278:  BRA    0276
027A:  DECFSZ FEF,F
027C:  BRA    0264
027E:  RETURN 0
....................  
.................... #zero_ram 
....................  
.................... typedef enum 
.................... { 
....................     BTN_CHAN1       = 0x81, 
....................     BTN_SERVICE     = 0x82, 
....................     BTN_CHAN2       = 0x83, 
....................     BTN_DISPL       = 0x84, 
....................     BTN_TIME        = 0x85, 
....................     BTN_MEMORY      = 0x86, 
....................     BTN_TRIG        = 0x87, 
....................     BTN_START       = 0x88, 
....................     BTN_CURSOSR     = 0x89, 
....................     BTN_MEAS        = 0x8a, 
....................     BTN_HELP        = 0x8c, 
....................     BTN_MENU        = 0x8d, 
....................     BTN_F1          = 0x8e, 
....................     BTN_F2          = 0x8f, 
....................     BTN_F3          = 0x90, 
....................     BTN_F4          = 0x91, 
....................     BTN_F5          = 0x92, 
....................     BTN_R_RANGE1    = 0x9c, 
....................     BTN_R_RSHIFT1   = 0x9d, 
....................     BTN_R_RANGE2    = 0x9e, 
....................     BTN_R_RSHIFT2   = 0x9f, 
....................     BTN_R_TBASE     = 0xa0, 
....................     BTN_R_TSHIFT    = 0xa1, 
....................     BTN_R_TRIGLEV   = 0xa2, 
....................     BTN_R_SET       = 0xa3 
.................... } Button; 
....................  
.................... #define SL0 PIN_B0 
.................... #define SL1 PIN_B1 
.................... #define SL2 PIN_B2 
.................... #define SL3 PIN_B3 
.................... #define SL4 PIN_B4 
.................... #define SL5 PIN_B5 
....................  
.................... #define sw_K1 PIN_C0 
.................... #define sw_K2 PIN_C1 
.................... #define sw_Sx PIN_C2 
....................  
.................... const char mask[6] = {0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0x1f}; 
.................... const char mask_kn[6] = {0xc9, 0xc9, 0xc9, 0x59, 0x7f, 0x49}; 
....................  
.................... void InitHardware(void); 
.................... void PressPowerOn(void); 
.................... void PressPowerOff(void); 
.................... char PressButton(char bit, char transDataPress); 
.................... static void PutInBufferWithRuk(char ib, char forZero); 
.................... static void PutInBuffer(char ib, char forZero); 
.................... static char PressButtons(char num, char bits[], char dataPress[]); 
.................... static char RotateSwitchGovernor(char forZero); 
.................... static char ForGovernorRuk1(char forZero); 
.................... static char ForGovernorRuk2(char forZero); 
.................... static char RotateGovernor(char cond, char b, char forZero); 
.................... static void FuncSL0(void); 
.................... static void FuncSL1(void); 
.................... static void FuncSL2(void); 
.................... static void FuncSL3(void); 
.................... static void FuncSL4(void); 
.................... static void FuncSL5(void); 
.................... static char FindStableChange(void); // Определим, произошло ли изменение состояния органая управления 
....................  
.................... typedef void(*pFuncVV)(void); 
....................  
.................... char curStateRB = 0; 
.................... char oldStateRB[6] = {0}; 
.................... char i = 0; 
.................... char ib = 0; 
.................... char transData = 0; 
.................... char recvData = 0; 
.................... char recvPowerOn = 0;   // Если 1, то принята команда включения питания 
.................... char recvPowerOff = 0;  // Если 1, то принята команда выключения питания 
....................  
.................... static char bit02 = 0; 
.................... static char bit04 = 0; 
.................... static char bit10 = 0; 
.................... static char bit20 = 0; 
....................  
.................... void main() 
*
0704:  CLRF   FF8
0706:  BCF    FD0.7
0708:  BSF    07.7
070A:  MOVLW  F2
070C:  MOVWF  00
070E:  MOVLW  0F
0710:  MOVWF  01
0712:  MOVLW  02
0714:  MOVWF  FE9
0716:  MOVLW  00
0718:  MOVWF  FEA
071A:  CLRF   FEE
071C:  CLRWDT
071E:  DECFSZ 00,F
0720:  BRA    071A
0722:  DECFSZ 01,F
0724:  BRA    071A
0726:  MOVLW  80
0728:  MOVWF  00
072A:  MOVLW  01
072C:  MOVWF  01
072E:  MOVLW  00
0730:  MOVWF  FE9
0732:  MOVLW  0F
0734:  MOVWF  FEA
0736:  CLRF   FEE
0738:  CLRWDT
073A:  DECFSZ 00,F
073C:  BRA    0736
073E:  DECFSZ 01,F
0740:  BRA    0736
0742:  MOVLW  70
0744:  MOVWF  FD3
0746:  MOVF   FD3,W
0748:  CLRF   17
074A:  CLRF   1E
074C:  CLRF   1F
074E:  CLRF   20
0750:  CLRF   21
0752:  CLRF   22
0754:  CLRF   23
0756:  CLRF   24
0758:  CLRF   25
075A:  CLRF   26
075C:  CLRF   27
075E:  MOVF   FC1,W
0760:  ANDLW  C0
0762:  IORLW  0F
0764:  MOVWF  FC1
0766:  MOVLW  07
0768:  MOVWF  FB4
076A:  BRA    07AA
076C:  DATA 06,40
076E:  DATA 18,00
0770:  DATA 36,00
0772:  DATA 28,00
0774:  DATA 03,07
0776:  DATA 06,81
0778:  DATA 9C,9D
077A:  DATA 8D,00
077C:  DATA 03,07
077E:  DATA 06,83
0780:  DATA 9E,9F
0782:  DATA 8E,00
0784:  DATA 03,07
0786:  DATA 06,85
0788:  DATA A0,A1
078A:  DATA 8F,00
078C:  DATA 03,04
078E:  DATA 06,87
0790:  DATA A2,88
0792:  DATA 90,00
0794:  DATA 01,02
0796:  DATA 03,04
0798:  DATA 05,06
079A:  DATA 89,8A
079C:  DATA 84,8C
079E:  DATA 86,82
07A0:  DATA 91,03
07A2:  DATA 06,A3
07A4:  DATA 92,00
07A6:  DATA 10,11
07A8:  DATA 12,00
07AA:  MOVLW  00
07AC:  MOVWF  FF8
07AE:  MOVLW  07
07B0:  MOVWF  FF7
07B2:  MOVLW  6C
07B4:  MOVWF  FF6
07B6:  TBLRD*+
07B8:  MOVF   FF5,W
07BA:  MOVWF  00
07BC:  XORLW  00
07BE:  BZ    07E6
07C0:  TBLRD*+
07C2:  MOVF   FF5,W
07C4:  MOVWF  01
07C6:  BTFSC  FE8.7
07C8:  BRA    07D4
07CA:  ANDLW  0F
07CC:  MOVWF  FEA
07CE:  TBLRD*+
07D0:  MOVFF  FF5,FE9
07D4:  BTFSC  01.6
07D6:  TBLRD*+
07D8:  BTFSS  01.6
07DA:  TBLRD*+
07DC:  MOVFF  FF5,FEE
07E0:  DCFSNZ 00,F
07E2:  BRA    07B6
07E4:  BRA    07D8
07E6:  CLRF   FF8
.................... { 
....................     InitHardware(); 
07E8:  BRA    0212
....................  
....................     //СОСТОЯНИЕ кнопок и ручек по ВКЛЮЧЕНИЮ: 
....................     //---------------------------------------- 
....................     for (i = 0; i < 6; i++) 
07EA:  CLRF   1E
07EC:  MOVF   1E,W
07EE:  SUBLW  05
07F0:  BNC   082E
....................     { 
....................         char du_pb = PORTB & 0xc0 | mask[i]; 
07F2:  MOVF   F81,W
07F4:  ANDLW  C0
07F6:  MOVWF  61
07F8:  CLRF   03
07FA:  MOVF   1E,W
07FC:  MOVFF  FF2,62
0800:  BCF    FF2.7
0802:  RCALL  0096
0804:  BTFSC  62.7
0806:  BSF    FF2.7
0808:  MOVWF  01
080A:  MOVF   61,W
080C:  IORWF  01,W
080E:  MOVWF  5E
....................         OUTPUT_B(du_pb); 
0810:  CLRF   F93
0812:  MOVFF  5E,F8A
....................         oldStateRB[i] = INPUT_A(); 
0816:  CLRF   03
0818:  MOVF   1E,W
081A:  ADDLW  18
081C:  MOVWF  FE9
081E:  MOVLW  00
0820:  ADDWFC 03,W
0822:  MOVWF  FEA
0824:  SETF   F92
0826:  MOVFF  F80,FEF
082A:  INCF   1E,F
082C:  BRA    07EC
....................     } 
....................  
....................     while (1) 
....................     { 
....................         for (i = 0; i < 6; i++) 
082E:  CLRF   1E
0830:  MOVF   1E,W
0832:  SUBLW  05
0834:  BNC   089A
....................         { 
....................             if (FindStableChange() == 1)        // Если состояние органов управление изменилось по сравнению с предыдущим 
0836:  BRA    0280
0838:  DECFSZ 01,W
083A:  BRA    088C
....................             { 
....................                 bit02 = curStateRB & 0x02; 
083C:  MOVF   17,W
083E:  ANDLW  02
0840:  MOVWF  24
....................                 bit04 = curStateRB & 0x04; 
0842:  MOVF   17,W
0844:  ANDLW  04
0846:  MOVWF  25
....................                 bit10 = curStateRB & 0x10; 
0848:  MOVF   17,W
084A:  ANDLW  10
084C:  MOVWF  26
....................                 bit20 = curStateRB & 0x20; 
084E:  MOVF   17,W
0850:  ANDLW  20
0852:  MOVWF  27
....................  
....................                 static const pFuncVV funcSL[] = {FuncSL0, FuncSL1, FuncSL2, FuncSL3, FuncSL4, FuncSL5}; 
....................  
....................                 pFuncVV func = funcSL[i]; 
0854:  BCF    FD8.0
0856:  RLCF   1E,W
0858:  CLRF   03
085A:  MOVFF  FF2,61
085E:  BCF    FF2.7
0860:  RCALL  00D6
0862:  TBLRD*+
0864:  MOVFF  FF5,03
0868:  BTFSC  61.7
086A:  BSF    FF2.7
086C:  MOVWF  5F
086E:  MOVFF  03,60
....................                 func(); 
0872:  CLRF   FEA
0874:  MOVLW  5F
0876:  MOVWF  FE9
0878:  RCALL  00FC
....................  
....................                 oldStateRB[i] = curStateRB; 
087A:  CLRF   03
087C:  MOVF   1E,W
087E:  ADDLW  18
0880:  MOVWF  FE9
0882:  MOVLW  00
0884:  ADDWFC 03,W
0886:  MOVWF  FEA
0888:  MOVFF  17,FEF
....................             } 
....................  
....................             if (recvPowerOff == 1) 
088C:  DECFSZ 23,W
088E:  BRA    0896
....................             { 
....................                 OUTPUT_LOW(PIN_C7); 
0890:  BCF    F94.7
0892:  BCF    F8B.7
....................                 recvPowerOff = 0; 
0894:  CLRF   23
....................             } 
0896:  INCF   1E,F
0898:  BRA    0830
....................         } 
089A:  BRA    082E
....................     } 
.................... } 
....................  
089C:  BRA    089C
....................  
.................... void PressPowerOn(void) 
.................... { 
....................     OUTPUT_HIGH(PIN_C7); 
*
069C:  BCF    F94.7
069E:  BSF    F8B.7
....................     recvPowerOn = 1; 
06A0:  MOVLW  01
06A2:  MOVWF  22
06A4:  GOTO   06B2 (RETURN)
.................... } 
....................  
.................... void PressPowerOff(void) 
.................... { 
....................     OUTPUT_HIGH(sw_K1); 
*
0148:  BCF    F94.0
014A:  BSF    F8B.0
....................     OUTPUT_HIGH(sw_K2); 
014C:  BCF    F94.1
014E:  BSF    F8B.1
....................     OUTPUT_HIGH(sw_Sx); 
0150:  BCF    F94.2
0152:  BSF    F8B.2
....................     OUTPUT_LOW(PIN_C7); 
0154:  BCF    F94.7
0156:  BCF    F8B.7
....................     recvPowerOn = 0; 
0158:  CLRF   22
015A:  RETURN 0
.................... } 
....................  
.................... #undef BIT_A 
.................... #define BIT_A(bit) (INPUT_A() & (1 << bit)) 
....................  
.................... char PressButton(char bit, char transDataPress) 
.................... { 
....................     if(!(curStateRB & (1 << bit))) 
*
0340:  MOVLW  01
0342:  MOVWF  00
0344:  MOVF   69,W
0346:  MOVWF  01
0348:  BZ    0352
034A:  BCF    FD8.0
034C:  RLCF   00,F
034E:  DECFSZ 01,F
0350:  BRA    034A
0352:  MOVF   00,W
0354:  ANDWF  17,W
0356:  BNZ   03B0
....................     { 
....................         transData = transDataPress; 
0358:  MOVFF  6A,20
....................         while(!(BIT_A(bit)))                                                // Пока нажата соответствующая кнопка 
035C:  SETF   F92
035E:  MOVFF  F80,6B
0362:  MOVLW  01
0364:  MOVWF  00
0366:  MOVF   69,W
0368:  MOVWF  01
036A:  BZ    0374
036C:  BCF    FD8.0
036E:  RLCF   00,F
0370:  DECFSZ 01,F
0372:  BRA    036C
0374:  MOVF   00,W
0376:  ANDWF  6B,W
0378:  BNZ   039E
....................         { 
....................             if((transDataPress == BTN_CURSOSR) && !BIT_A(2) && !BIT_A(4))   // Если нажаты кнопки КУРСОРЫ, ДИСПЛЕЙ и ПАМЯТЬ 
037A:  MOVF   6A,W
037C:  SUBLW  89
037E:  BNZ   039C
0380:  SETF   F92
0382:  BTFSC  F80.2
0384:  BRA    039C
0386:  SETF   F92
0388:  BTFSC  F80.4
038A:  BRA    039C
....................             { 
....................                 while(transData != 0) {}; 
038C:  MOVF   20,F
038E:  BTFSS  FD8.2
0390:  BRA    038C
....................                 transData = 0x24; 
0392:  MOVLW  24
0394:  MOVWF  20
....................                 return 1; 
0396:  MOVLW  01
0398:  MOVWF  01
039A:  BRA    03B4
....................             } 
039C:  BRA    035C
....................         }; 
....................         while(transData != 0) {}; 
039E:  MOVF   20,F
03A0:  BTFSS  FD8.2
03A2:  BRA    039E
....................         transData = transDataPress - 0x80; 
03A4:  MOVLW  80
03A6:  SUBWF  6A,W
03A8:  MOVWF  20
....................         return 1; 
03AA:  MOVLW  01
03AC:  MOVWF  01
03AE:  BRA    03B4
....................     } 
....................     return 0; 
03B0:  MOVLW  00
03B2:  MOVWF  01
03B4:  GOTO   03EE (RETURN)
.................... } 
....................  
.................... #undef BIT_A 
....................  
.................... static void PutInBufferWithRuk(char ib, char forZero) 
.................... { 
....................     if (ib == 0) 
*
0402:  MOVF   63,F
0404:  BNZ   040C
....................     { 
....................         transData = forZero; // Влево 
0406:  MOVFF  64,20
....................     } 
040A:  BRA    0416
....................     else if (ib == 1) 
040C:  DECFSZ 63,W
040E:  BRA    0416
....................     { 
....................         transData = forZero + 0x80;  // Вправо 
0410:  MOVLW  80
0412:  ADDWF  64,W
0414:  MOVWF  20
....................     } 
0416:  RETURN 0
.................... } 
....................  
.................... static void PutInBuffer(char ib, char forZero) 
.................... { 
....................     if (ib == 0) 
*
051A:  MOVF   65,F
051C:  BNZ   0524
....................     { 
....................         transData = forZero; 
051E:  MOVFF  66,20
....................     } 
0522:  BRA    052E
....................     else if (ib == 1) 
0524:  DECFSZ 65,W
0526:  BRA    052E
....................     { 
....................         transData = forZero + 0x80; 
0528:  MOVLW  80
052A:  ADDWF  66,W
052C:  MOVWF  20
....................     } 
052E:  GOTO   058A (RETURN)
.................... } 
....................  
.................... static char PressButtons(char num, char bits[], char dataPress[]) 
.................... { 
....................     for (char i = 0; i < num; i++) 
*
03B8:  CLRF   66
03BA:  MOVF   61,W
03BC:  SUBWF  66,W
03BE:  BC    03FC
....................     { 
....................         if (PressButton(bits[i], dataPress[i])) 
03C0:  CLRF   03
03C2:  MOVF   66,W
03C4:  ADDWF  62,W
03C6:  MOVWF  FE9
03C8:  MOVF   63,W
03CA:  ADDWFC 03,W
03CC:  MOVWF  FEA
03CE:  MOVFF  FEF,67
03D2:  CLRF   03
03D4:  MOVF   66,W
03D6:  ADDWF  64,W
03D8:  MOVWF  FE9
03DA:  MOVF   65,W
03DC:  ADDWFC 03,W
03DE:  MOVWF  FEA
03E0:  MOVFF  FEF,68
03E4:  MOVFF  67,69
03E8:  MOVFF  68,6A
03EC:  BRA    0340
03EE:  MOVF   01,F
03F0:  BZ    03F8
....................         { 
....................             return 1; 
03F2:  MOVLW  01
03F4:  MOVWF  01
03F6:  BRA    0400
....................         } 
03F8:  INCF   66,F
03FA:  BRA    03BA
....................     } 
....................  
....................     return 0; 
03FC:  MOVLW  00
03FE:  MOVWF  01
0400:  RETURN 0
.................... } 
....................  
.................... static char ForGovernorRuk1(char forZero) 
.................... { 
....................     if (bit02 && bit04) 
*
0418:  MOVF   24,F
041A:  BZ    047E
041C:  MOVF   25,F
041E:  BZ    047E
....................     { 
....................         for (ib = 0; ib < 2; ib++) 
0420:  CLRF   1F
0422:  MOVF   1F,W
0424:  SUBLW  01
0426:  BNC   047E
....................         { 
....................             if ((curStateRB & (0x02 << ib)) && (!(oldStateRB[i] & (0x02 << ib)))) 
0428:  MOVLW  02
042A:  MOVWF  00
042C:  MOVF   1F,W
042E:  MOVWF  01
0430:  BZ    043A
0432:  BCF    FD8.0
0434:  RLCF   00,F
0436:  DECFSZ 01,F
0438:  BRA    0432
043A:  MOVF   00,W
043C:  ANDWF  17,W
043E:  BZ    047A
0440:  CLRF   03
0442:  MOVF   1E,W
0444:  ADDLW  18
0446:  MOVWF  FE9
0448:  MOVLW  00
044A:  ADDWFC 03,W
044C:  MOVWF  FEA
044E:  MOVFF  FEF,63
0452:  MOVLW  02
0454:  MOVWF  00
0456:  MOVF   1F,W
0458:  MOVWF  01
045A:  BZ    0464
045C:  BCF    FD8.0
045E:  RLCF   00,F
0460:  DECFSZ 01,F
0462:  BRA    045C
0464:  MOVF   00,W
0466:  ANDWF  63,W
0468:  BNZ   047A
....................             { 
....................                 PutInBufferWithRuk(ib, forZero); 
046A:  MOVFF  1F,63
046E:  MOVFF  62,64
0472:  RCALL  0402
....................                 return 1; 
0474:  MOVLW  01
0476:  MOVWF  01
0478:  BRA    0482
....................             } 
047A:  INCF   1F,F
047C:  BRA    0422
....................         } 
....................     } 
....................     return 0; 
047E:  MOVLW  00
0480:  MOVWF  01
0482:  GOTO   04FA (RETURN)
.................... } 
....................  
.................... static char ForGovernorRuk2(char forZero) 
.................... { 
....................     if (!bit02 && !bit04) 
0486:  MOVF   24,F
0488:  BNZ   04EC
048A:  MOVF   25,F
048C:  BNZ   04EC
....................     { 
....................         for (ib = 0; ib < 2; ib++) 
048E:  CLRF   1F
0490:  MOVF   1F,W
0492:  SUBLW  01
0494:  BNC   04EC
....................         { 
....................             if (!(curStateRB & (0x02 << ib)) && ((oldStateRB[i] & (0x02 << ib)))) 
0496:  MOVLW  02
0498:  MOVWF  00
049A:  MOVF   1F,W
049C:  MOVWF  01
049E:  BZ    04A8
04A0:  BCF    FD8.0
04A2:  RLCF   00,F
04A4:  DECFSZ 01,F
04A6:  BRA    04A0
04A8:  MOVF   00,W
04AA:  ANDWF  17,W
04AC:  BNZ   04E8
04AE:  CLRF   03
04B0:  MOVF   1E,W
04B2:  ADDLW  18
04B4:  MOVWF  FE9
04B6:  MOVLW  00
04B8:  ADDWFC 03,W
04BA:  MOVWF  FEA
04BC:  MOVFF  FEF,63
04C0:  MOVLW  02
04C2:  MOVWF  00
04C4:  MOVF   1F,W
04C6:  MOVWF  01
04C8:  BZ    04D2
04CA:  BCF    FD8.0
04CC:  RLCF   00,F
04CE:  DECFSZ 01,F
04D0:  BRA    04CA
04D2:  MOVF   00,W
04D4:  ANDWF  63,W
04D6:  BZ    04E8
....................             { 
....................                 PutInBufferWithRuk(ib, forZero); 
04D8:  MOVFF  1F,63
04DC:  MOVFF  62,64
04E0:  RCALL  0402
....................                 return 1; 
04E2:  MOVLW  01
04E4:  MOVWF  01
04E6:  BRA    04F0
....................             } 
04E8:  INCF   1F,F
04EA:  BRA    0490
....................         } 
....................     } 
....................     return 0; 
04EC:  MOVLW  00
04EE:  MOVWF  01
04F0:  GOTO   050A (RETURN)
.................... } 
....................  
.................... static char RotateSwitchGovernor(char forZero) 
.................... { 
....................     if (ForGovernorRuk1(forZero)) 
04F4:  MOVFF  61,62
04F8:  BRA    0418
04FA:  MOVF   01,F
04FC:  BZ    0504
....................     { 
....................         return 1; 
04FE:  MOVLW  01
0500:  MOVWF  01
0502:  BRA    0518
....................     } 
....................     if (ForGovernorRuk2(forZero)) 
0504:  MOVFF  61,62
0508:  BRA    0486
050A:  MOVF   01,F
050C:  BZ    0514
....................     { 
....................         return 1; 
050E:  MOVLW  01
0510:  MOVWF  01
0512:  BRA    0518
....................     } 
....................     return 0; 
0514:  MOVLW  00
0516:  MOVWF  01
0518:  RETURN 0
.................... } 
....................  
.................... static char RotateGovernor(char cond, char b, char forZero) 
.................... { 
....................     if (cond) 
*
0532:  MOVF   62,F
0534:  BZ    0594
....................     { 
....................         for (ib = 0; ib < 2; ib++) 
0536:  CLRF   1F
0538:  MOVF   1F,W
053A:  SUBLW  01
053C:  BNC   0594
....................         { 
....................             if ((curStateRB & (b << ib)) && (!(oldStateRB[i] & (b << ib)))) 
053E:  MOVFF  63,00
0542:  MOVF   1F,W
0544:  MOVWF  01
0546:  BZ    0550
0548:  BCF    FD8.0
054A:  RLCF   00,F
054C:  DECFSZ 01,F
054E:  BRA    0548
0550:  MOVF   00,W
0552:  ANDWF  17,W
0554:  BZ    0590
0556:  CLRF   03
0558:  MOVF   1E,W
055A:  ADDLW  18
055C:  MOVWF  FE9
055E:  MOVLW  00
0560:  ADDWFC 03,W
0562:  MOVWF  FEA
0564:  MOVFF  FEF,65
0568:  MOVF   63,W
056A:  MOVWF  00
056C:  MOVF   1F,W
056E:  MOVWF  01
0570:  BZ    057A
0572:  BCF    FD8.0
0574:  RLCF   00,F
0576:  DECFSZ 01,F
0578:  BRA    0572
057A:  MOVF   00,W
057C:  ANDWF  65,W
057E:  BNZ   0590
....................             { 
....................                 PutInBuffer(ib, forZero); 
0580:  MOVFF  1F,65
0584:  MOVFF  64,66
0588:  BRA    051A
....................                 return 1; 
058A:  MOVLW  01
058C:  MOVWF  01
058E:  BRA    0598
....................             } 
0590:  INCF   1F,F
0592:  BRA    0538
....................         } 
....................     } 
....................     return 0; 
0594:  MOVLW  00
0596:  MOVWF  01
0598:  RETURN 0
.................... } 
....................  
.................... static void FuncSL0(void) 
.................... { 
....................     static char bits[] = {0, 3, 7, 6}; 
....................     // №1   №28   № 29  
....................     static char data[] = {BTN_CHAN1, BTN_R_RANGE1, BTN_R_RSHIFT1, BTN_MENU}; 
....................  
....................     if (!PressButtons(4, bits, data))                       // Сначала проверяем кнопки на SL0 
059A:  MOVLW  04
059C:  MOVWF  61
059E:  CLRF   63
05A0:  MOVLW  28
05A2:  MOVWF  62
05A4:  CLRF   65
05A6:  MOVLW  2C
05A8:  MOVWF  64
05AA:  RCALL  03B8
05AC:  MOVF   01,F
05AE:  BNZ   05D6
....................     { 
....................         if (!RotateSwitchGovernor(0x14))                    // ВОЛЬТ/ДЕЛ 1 
05B0:  MOVLW  14
05B2:  MOVWF  61
05B4:  RCALL  04F4
05B6:  MOVF   01,F
05B8:  BNZ   05D6
....................         { 
....................             RotateGovernor(bit10 && bit20, 0x10, 0x15);     // RShift1 
05BA:  MOVF   26,F
05BC:  BZ    05C2
05BE:  MOVF   27,F
05C0:  BNZ   05C6
05C2:  MOVLW  00
05C4:  BRA    05C8
05C6:  MOVLW  01
05C8:  MOVWF  61
05CA:  MOVWF  62
05CC:  MOVLW  10
05CE:  MOVWF  63
05D0:  MOVLW  15
05D2:  MOVWF  64
05D4:  RCALL  0532
....................         } 
....................     } 
05D6:  RETURN 0
.................... } 
....................  
.................... static void FuncSL1(void) 
.................... { 
....................     static char bits[] = {0, 3, 7, 6}; 
....................     static char data[] = {BTN_CHAN2, BTN_R_RANGE2, BTN_R_RSHIFT2, BTN_F1}; 
....................     if (!PressButtons(4, bits, data)) 
05D8:  MOVLW  04
05DA:  MOVWF  61
05DC:  CLRF   63
05DE:  MOVLW  30
05E0:  MOVWF  62
05E2:  CLRF   65
05E4:  MOVLW  34
05E6:  MOVWF  64
05E8:  RCALL  03B8
05EA:  MOVF   01,F
05EC:  BNZ   0614
....................     { 
....................         if (!RotateSwitchGovernor(0x16))                    // ВОЛЬТ/ДЕЛ 2 
05EE:  MOVLW  16
05F0:  MOVWF  61
05F2:  RCALL  04F4
05F4:  MOVF   01,F
05F6:  BNZ   0614
....................         { 
....................             RotateGovernor(bit10 && bit20, 0x10, 0x17);     // RShift2 
05F8:  MOVF   26,F
05FA:  BZ    0600
05FC:  MOVF   27,F
05FE:  BNZ   0604
0600:  MOVLW  00
0602:  BRA    0606
0604:  MOVLW  01
0606:  MOVWF  61
0608:  MOVWF  62
060A:  MOVLW  10
060C:  MOVWF  63
060E:  MOVLW  17
0610:  MOVWF  64
0612:  RCALL  0532
....................         } 
....................     } 
0614:  RETURN 0
.................... } 
....................  
.................... static void FuncSL2(void) 
.................... { 
....................     static char bits[] = {0, 3, 7, 6}; 
....................     static char data[] = {BTN_TIME, BTN_R_TBASE, BTN_R_TSHIFT, BTN_F2}; 
....................  
....................     if (!PressButtons(4, bits, data)) 
0616:  MOVLW  04
0618:  MOVWF  61
061A:  CLRF   63
061C:  MOVLW  38
061E:  MOVWF  62
0620:  CLRF   65
0622:  MOVLW  3C
0624:  MOVWF  64
0626:  RCALL  03B8
0628:  MOVF   01,F
062A:  BNZ   0652
....................     { 
....................         if (!RotateSwitchGovernor(0x18))                    // ВРЕМЯ/ДЕЛ 
062C:  MOVLW  18
062E:  MOVWF  61
0630:  RCALL  04F4
0632:  MOVF   01,F
0634:  BNZ   0652
....................         { 
....................             RotateGovernor(bit10 && bit20, 0x10, 0x19);     // TShift 
0636:  MOVF   26,F
0638:  BZ    063E
063A:  MOVF   27,F
063C:  BNZ   0642
063E:  MOVLW  00
0640:  BRA    0644
0642:  MOVLW  01
0644:  MOVWF  61
0646:  MOVWF  62
0648:  MOVLW  10
064A:  MOVWF  63
064C:  MOVLW  19
064E:  MOVWF  64
0650:  RCALL  0532
....................         } 
....................     } 
0652:  RETURN 0
.................... } 
....................  
.................... static void FuncSL3(void) 
.................... { 
....................     static char bits[] = {0, 3, 4, 6}; 
....................     static char data[] = {BTN_TRIG, BTN_R_TRIGLEV, BTN_START, BTN_F3}; 
....................  
....................     if (!PressButtons(4, bits, data)) 
0654:  MOVLW  04
0656:  MOVWF  61
0658:  CLRF   63
065A:  MOVLW  40
065C:  MOVWF  62
065E:  CLRF   65
0660:  MOVLW  44
0662:  MOVWF  64
0664:  RCALL  03B8
0666:  MOVF   01,F
0668:  BNZ   0686
....................     { 
....................         RotateGovernor(bit02 && bit04, 0x02, 0x1a);        // TrigLev 
066A:  MOVF   24,F
066C:  BZ    0672
066E:  MOVF   25,F
0670:  BNZ   0676
0672:  MOVLW  00
0674:  BRA    0678
0676:  MOVLW  01
0678:  MOVWF  61
067A:  MOVWF  62
067C:  MOVLW  02
067E:  MOVWF  63
0680:  MOVLW  1A
0682:  MOVWF  64
0684:  RCALL  0532
....................     } 
0686:  RETURN 0
.................... } 
....................  
.................... static void FuncSL4(void) 
.................... { 
....................     static char bits[] = {0, 1, 2, 3, 4, 5, 6}; 
....................     static char data[] = {BTN_CURSOSR, BTN_MEAS, BTN_DISPL, BTN_HELP, BTN_MEMORY, BTN_SERVICE, BTN_F4}; 
....................  
....................     PressButtons(7, bits, data); 
0688:  MOVLW  07
068A:  MOVWF  61
068C:  CLRF   63
068E:  MOVLW  48
0690:  MOVWF  62
0692:  CLRF   65
0694:  MOVLW  4F
0696:  MOVWF  64
0698:  RCALL  03B8
069A:  RETURN 0
.................... } 
....................  
.................... static void FuncSL5(void) 
.................... { 
....................     //Pit,Men "5", Сброс Установки: 
....................  
....................     if (!(curStateRB & (1 << 0)))  //Pit 
*
06A8:  BTFSC  17.0
06AA:  BRA    06D0
....................     { 
....................         if (recvPowerOn == 0) 
06AC:  MOVF   22,F
06AE:  BNZ   06C4
....................         { 
....................             PressPowerOn(); 
06B0:  BRA    069C
....................             DELAY_MS(1);  //для настройки STM 
06B2:  MOVLW  01
06B4:  MOVWF  64
06B6:  RCALL  025A
....................             do 
....................                 curStateRB = INPUT_A(); 
06B8:  SETF   F92
06BA:  MOVFF  F80,17
....................             while (!(curStateRB & (1 << 0))); 
06BE:  BTFSS  17.0
06C0:  BRA    06B8
....................             //отжатие произошло 
....................         } 
06C2:  BRA    06CE
....................         else 
....................         { 
....................             while (transData != 0) 
06C4:  MOVF   20,F
06C6:  BZ    06CA
....................             { 
06C8:  BRA    06C4
....................             } 
....................             transData = 0x8B;  //№11-наж. 
06CA:  MOVLW  8B
06CC:  MOVWF  20
....................         } 
....................         return; 
06CE:  BRA    0702
....................     } 
....................  
....................     static char bits[] = {3, 6}; 
....................     static char data[] = {BTN_R_SET, BTN_F5}; 
....................  
....................     if (!PressButtons(2, bits, data)) 
06D0:  MOVLW  02
06D2:  MOVWF  61
06D4:  CLRF   63
06D6:  MOVLW  56
06D8:  MOVWF  62
06DA:  CLRF   65
06DC:  MOVLW  58
06DE:  MOVWF  64
06E0:  RCALL  03B8
06E2:  MOVF   01,F
06E4:  BNZ   0702
....................     { 
....................         RotateGovernor(bit02 && bit04, 0x02, 0x1b);        // УСТАНОВКА 
06E6:  MOVF   24,F
06E8:  BZ    06EE
06EA:  MOVF   25,F
06EC:  BNZ   06F2
06EE:  MOVLW  00
06F0:  BRA    06F4
06F2:  MOVLW  01
06F4:  MOVWF  61
06F6:  MOVWF  62
06F8:  MOVLW  02
06FA:  MOVWF  63
06FC:  MOVLW  1B
06FE:  MOVWF  64
0700:  RCALL  0532
....................     } 
0702:  RETURN 0
.................... } 
....................  
.................... static char FindStableChange(void) 
*
0280:  MOVF   F81,W
0282:  ANDLW  C0
0284:  MOVWF  64
0286:  CLRF   03
0288:  MOVF   1E,W
028A:  MOVFF  FF2,65
028E:  BCF    FF2.7
0290:  RCALL  0096
0292:  BTFSC  65.7
0294:  BSF    FF2.7
0296:  MOVWF  01
0298:  MOVF   64,W
029A:  IORWF  01,W
029C:  MOVWF  61
.................... { 
....................     // output_a(mask[i]);              //SL... -> PORTB 
....................     char du_pb = PORTB & 0xc0 | mask[i]; 
....................     OUTPUT_B(du_pb); 
029E:  CLRF   F93
02A0:  MOVFF  61,F8A
....................     curStateRB = INPUT_A(); 
02A4:  SETF   F92
02A6:  MOVFF  F80,17
....................     if (oldStateRB[i] ^ curStateRB) 
02AA:  CLRF   03
02AC:  MOVF   1E,W
02AE:  ADDLW  18
02B0:  MOVWF  FE9
02B2:  MOVLW  00
02B4:  ADDWFC 03,W
02B6:  MOVWF  FEA
02B8:  MOVF   FEF,W
02BA:  XORWF  17,W
02BC:  BZ    0338
....................     { 
....................         if ((curStateRB & mask_kn[i]) != mask_kn[i])  //если это кнопка, то отрабат. дребезг 
02BE:  CLRF   03
02C0:  MOVF   1E,W
02C2:  MOVFF  FF2,64
02C6:  BCF    FF2.7
02C8:  RCALL  00B6
02CA:  BTFSC  64.7
02CC:  BSF    FF2.7
02CE:  MOVWF  01
02D0:  MOVF   17,W
02D2:  ANDWF  01,W
02D4:  MOVWF  64
02D6:  CLRF   03
02D8:  MOVF   1E,W
02DA:  MOVFF  FF2,65
02DE:  BCF    FF2.7
02E0:  RCALL  00B6
02E2:  BTFSC  65.7
02E4:  BSF    FF2.7
02E6:  MOVWF  01
02E8:  SUBWF  64,W
02EA:  BZ    030E
....................         { 
....................             for (int i = 0; i < 3; i++) 
02EC:  CLRF   62
02EE:  MOVF   62,W
02F0:  SUBLW  02
02F2:  BNC   030C
....................             { 
....................                 if (INPUT_A() != curStateRB) 
02F4:  SETF   F92
02F6:  MOVF   17,W
02F8:  SUBWF  F80,W
02FA:  BZ    0302
....................                 { 
....................                     return 0; 
02FC:  MOVLW  00
02FE:  MOVWF  01
0300:  BRA    033C
....................                 } 
....................                 DELAY_MS(1); 
0302:  MOVLW  01
0304:  MOVWF  64
0306:  RCALL  025A
0308:  INCF   62,F
030A:  BRA    02EE
....................             } 
....................         } 
030C:  BRA    0332
....................         else        // а это ручка 
....................         { 
....................             for (int i = 0; i < 5; i++) 
030E:  CLRF   63
0310:  MOVF   63,W
0312:  SUBLW  04
0314:  BNC   0332
....................             { 
....................                 if (INPUT_A() != curStateRB) 
0316:  SETF   F92
0318:  MOVF   17,W
031A:  SUBWF  F80,W
031C:  BZ    0324
....................                 { 
....................                     return 0; 
031E:  MOVLW  00
0320:  MOVWF  01
0322:  BRA    033C
....................                 } 
....................                 DELAY_US(100); 
0324:  MOVLW  42
0326:  MOVWF  00
0328:  DECFSZ 00,F
032A:  BRA    0328
032C:  NOP   
032E:  INCF   63,F
0330:  BRA    0310
....................             } 
....................         } 
....................         return 1; 
0332:  MOVLW  01
0334:  MOVWF  01
0336:  BRA    033C
....................     } 
....................     return 0; 
0338:  MOVLW  00
033A:  MOVWF  01
033C:  GOTO   0838 (RETURN)
.................... } 
....................  
.................... static void InitHardware() 
.................... { 
....................     DISABLE_INTERRUPTS(GLOBAL);     // общий запрет прерываний 
*
0212:  BCF    FF2.6
0214:  BCF    FF2.7
0216:  BTFSC  FF2.7
0218:  BRA    0214
....................     SETUP_OSCILLATOR(OSC_8MHZ);     // |OSC_INTRC 
021A:  MOVLW  70
021C:  MOVWF  FD3
021E:  MOVF   FD3,W
....................  
....................     SET_TRIS_A(0xff);   // входы 
0220:  MOVLW  FF
0222:  MOVWF  F92
....................     SET_TRIS_B(0x00);   // выходы 
0224:  MOVLW  00
0226:  MOVWF  F93
....................     SET_TRIS_C(0x10);   // выходы, RC4-вход(данные от STM) 
0228:  MOVLW  10
022A:  MOVWF  F94
....................  
....................     PORTC = 0xcf; 
022C:  MOVLW  CF
022E:  MOVWF  F82
....................     PORTB = 0xff; 
0230:  SETF   F81
....................  
....................     PressPowerOff(); 
0232:  RCALL  0148
....................  
....................     //Инициализация модуля MSSP(режим SPI) 
....................     SSPCON1 = 0x31; 
0234:  MOVLW  31
0236:  MOVWF  FC6
....................     SSPSTAT = 0;        // 0x80; 
0238:  CLRF   FC7
....................     SSPBUF = 0x55; 
023A:  MOVLW  55
023C:  MOVWF  FC9
....................  
....................     //иниц. таймеров: 
....................     //t0con=0xc8;   // 8-ми разр 
....................     T0CON = 0x88;   // 16-ми разр счетчик 
023E:  MOVLW  88
0240:  MOVWF  FD5
....................     T1CON = 0x85; 
0242:  MOVLW  85
0244:  MOVWF  FCD
....................     SETUP_TIMER_1(T1_INTERNAL | T1_DIV_BY_1); 
0246:  MOVWF  FCD
....................  
....................     SET_TIMER1(62286); 
0248:  MOVLW  F3
024A:  MOVWF  FCF
024C:  MOVLW  4E
024E:  MOVWF  FCE
....................     //set_timer0(64536);  
....................  
....................     //enable_interrupts(INT_TIMER2); 
....................     ENABLE_INTERRUPTS(INT_TIMER1); 
0250:  BSF    F9D.0
....................     //enable_interrupts(INT_TIMER0); 
....................     ENABLE_INTERRUPTS(GLOBAL); 
0252:  MOVLW  C0
0254:  IORWF  FF2,F
0256:  GOTO   07EA (RETURN)
.................... } 
....................  
....................  
.................... #INT_TIMER1 //Приходят каждые 10ms 
....................  
.................... void Prd_kn(void)  //По SPI перед. сост. ПП и прин сообщения от STM 
.................... { 
....................     while (!(SSPSTAT & 0x01)) 
*
015C:  BTFSC  FC7.0
015E:  BRA    0162
....................     { 
0160:  BRA    015C
....................     }   // ждем  завершения приема 
....................     recvData = SSPBUF;               // чтение буфера SPI 
0162:  MOVFF  FC9,21
....................     char kod = recvData & 0x7f; 
....................  
....................     static char buttons[4] = {0, sw_K1, sw_K2, sw_Sx}; 
0166:  MOVF   21,W
0168:  ANDLW  7F
016A:  MOVWF  6C
....................  
....................     if ((kod > 0) && (kod < 4))         // св.: Kan1,Kan2,Sinchr, 
016C:  MOVF   6C,F
016E:  BZ    01E4
0170:  MOVF   6C,W
0172:  SUBLW  03
0174:  BNC   01E4
....................     { 
....................         if (recvData & (1 << 7))         // зажигаем или гасим светодиод: 
0176:  BTFSS  21.7
0178:  BRA    01AE
....................         { 
....................             OUTPUT_LOW(buttons[kod]);   // зажигаем - (0) 
017A:  CLRF   03
017C:  MOVF   6C,W
017E:  ADDLW  5A
0180:  MOVWF  FE9
0182:  MOVLW  00
0184:  ADDWFC 03,W
0186:  MOVWF  FEA
0188:  MOVFF  FEF,6D
018C:  MOVFF  6D,6E
0190:  CLRF   6F
0192:  MOVLW  0F
0194:  MOVWF  71
0196:  MOVLW  89
0198:  MOVWF  70
019A:  RCALL  010A
019C:  MOVFF  6D,6E
01A0:  CLRF   6F
01A2:  MOVLW  0F
01A4:  MOVWF  71
01A6:  MOVLW  92
01A8:  MOVWF  70
01AA:  RCALL  010A
....................         } 
01AC:  BRA    01E2
....................         else 
....................         { 
....................             OUTPUT_HIGH(buttons[kod]);  //гасим - (1) 
01AE:  CLRF   03
01B0:  MOVF   6C,W
01B2:  ADDLW  5A
01B4:  MOVWF  FE9
01B6:  MOVLW  00
01B8:  ADDWFC 03,W
01BA:  MOVWF  FEA
01BC:  MOVFF  FEF,6D
01C0:  MOVFF  6D,6E
01C4:  MOVLW  01
01C6:  MOVWF  6F
01C8:  MOVLW  0F
01CA:  MOVWF  71
01CC:  MOVLW  89
01CE:  MOVWF  70
01D0:  RCALL  010A
01D2:  MOVFF  6D,6E
01D6:  CLRF   6F
01D8:  MOVLW  0F
01DA:  MOVWF  71
01DC:  MOVLW  92
01DE:  MOVWF  70
01E0:  RCALL  010A
....................         } 
....................     } 
01E2:  BRA    01F4
....................     else 
....................     { 
....................         if ((kod == 4) && (recvPowerOn == 1)) 
01E4:  MOVF   6C,W
01E6:  SUBLW  04
01E8:  BNZ   01F4
01EA:  DECFSZ 22,W
01EC:  BRA    01F4
....................         { 
....................             recvPowerOff = 1; 
01EE:  MOVLW  01
01F0:  MOVWF  23
....................             PressPowerOff(); 
01F2:  RCALL  0148
....................         } 
....................     } 
....................  
....................     SSPCON1 = SSPCON1 & 0x7f;   //сброс бита конфликта 
01F4:  BCF    FC6.7
....................     //Буфер готов к передаче:    
....................  
....................     OUTPUT_HIGH(PIN_C6); 
01F6:  BCF    F94.6
01F8:  BSF    F8B.6
....................     // spi_write(transData); //запись байта в SPI 
....................     SSPBUF = transData; 
01FA:  MOVFF  20,FC9
....................     transData = 0; 
01FE:  CLRF   20
....................     OUTPUT_LOW(PIN_C6); 
0200:  BCF    F94.6
0202:  BCF    F8B.6
....................  
....................     SET_TIMER1(45536);  //65536-(0,01/(4/8.000.000))=20000 -- (10ms)   
0204:  MOVLW  B1
0206:  MOVWF  FCF
0208:  MOVLW  E0
020A:  MOVWF  FCE
020C:  BCF    F9E.0
020E:  GOTO   0054
.................... } 

Configuration Fuses:
   Word  1: C800   INTRC_IO FCMEN IESO
   Word  2: 1E19   NOPUT NOBROWNOUT BORV21 NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0000   NOSTVREN NOLVP NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB
   Word  6: E00F   NOWRT NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
